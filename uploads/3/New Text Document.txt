├── .DS_Store
├── .gitattributes
├── Dataset
    ├── .DS_Store
    └── DP-MFSC_Dataset
    │   ├── Centers.txt
    │   ├── Washington.txt
    │   ├── chrUn.txt
    │   ├── chrY.txt
    │   ├── promoters.txt
    │   ├── realall-gene.txt
    │   └── splice.txt
├── main.py
├── models
    ├── ConsolidatedFrequency.py
    ├── Dataset.py
    ├── GroundTruth.py
    ├── Handlers.py
    ├── Randomize.py
    ├── Sandwich.py
    ├── __pycache__
    │   ├── ConsolidatedFrequency.cpython-311.pyc
    │   ├── ConsolidatedFrequency.cpython-38.pyc
    │   ├── GroundTruth.cpython-311.pyc
    │   ├── GroundTruth.cpython-38.pyc
    │   ├── Handlers.cpython-311.pyc
    │   ├── Handlers.cpython-38.pyc
    │   ├── Randomize.cpython-311.pyc
    │   ├── Randomize.cpython-38.pyc
    │   ├── Sandwich.cpython-311.pyc
    │   ├── Sandwich.cpython-38.pyc
    │   ├── seqUtils.cpython-311.pyc
    │   └── seqUtils.cpython-38.pyc
    └── seqUtils.py
├── readme.md
└── utils
    ├── Options.py
    ├── Sampling.py
    └── __pycache__
        ├── Options.cpython-311.pyc
        ├── Options.cpython-38.pyc
        ├── Sampling.cpython-311.pyc
        └── Sampling.cpython-38.pyc


/.DS_Store:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/DSI-Lab1/DPFLMD/552db919d58af15cae8204bf5bd2b85d7350f632/.DS_Store


--------------------------------------------------------------------------------
/.gitattributes:
--------------------------------------------------------------------------------
1 | # Auto detect text files and perform LF normalization
2 | * text=auto
3 | 


--------------------------------------------------------------------------------
/Dataset/.DS_Store:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/DSI-Lab1/DPFLMD/552db919d58af15cae8204bf5bd2b85d7350f632/Dataset/.DS_Store


--------------------------------------------------------------------------------
/Dataset/DP-MFSC_Dataset/Washington.txt:
--------------------------------------------------------------------------------
  1 | GCCGCTGCTGCTGCATCCGTCGACGTCG
  2 | CCGTCGACGTCGAC
  3 | GCAGCGCTGCCGTCGCCGGCTGAGCAGC
  4 | GTCGCAGTCGCTGCC
  5 | CGCTGTTGCGGCCGACGCTGACGCA
  6 | CGCTGCCACCGCTG
  7 | CAGCGGCTGCGGA
  8 | GTTAATCCG
  9 | GAGATTATT
 10 | TATAATCGC
 11 | GGGATTAGC
 12 | GAAGGGATTAGGG
 13 | GACTTTTCGCT
 14 | CGATTTTCTCG
 15 | GCATTTTCCCA
 16 | AGAGAAAACCC
 17 | GAATAACCCAAGAGAAA
 18 | ACAGAAAAATC
 19 | CGAGAAAATCG
 20 | TGGTTTTCCCG
 21 | GGGTTTCTCCC
 22 | ACATTTAACTGGTTAATTGA
 23 | ATAACCCAAT
 24 | TTAATCCGTT
 25 | ACCGGGTTGC
 26 | TCGAAGGGATTAG
 27 | ACTGGGTTAT
 28 | TTAACCCGTTT
 29 | TTAGCGGCATAAAAGGGTTAAACAGG
 30 | AATGCGCGCCCATAAAAGGGTTAAG
 31 | GAACACTCAAGAGAGA
 32 | AGAGCGCTCAAAAAC
 33 | TTTGAGCGTTTCGCT
 34 | TTTTCCACTCGTTTTTAGG
 35 | GAGTGAGTTGAGTCGGCAGAG
 36 | ACAGGCGAGTGACAAT
 37 | GCATTTGAGTGAGTTA
 38 | TGAGCG
 39 | TGAGTG
 40 | CACTCA
 41 | CACTCA
 42 | CACTCA
 43 | CACTCA
 44 | CACTCA
 45 | CATACCCGCAGTTT
 46 | CAGACCCACATAAT
 47 | TTTGCCCGCATTTC
 48 | TCAATGCGGGCCGG
 49 | AATGCCCACATGAT
 50 | ACCACCCTCATGAG
 51 | CACGCCAGCATGAA
 52 | GTTGTGTAAT
 53 | TCATGACACCAT
 54 | AATTTTCCC
 55 | GGAACATTTTGCGCAAGACATTTCCCAAG
 56 | AGATTGTGCCACAGCT
 57 | TGATGTAAT
 58 | AACATGACTCAGAGGAA
 59 | AGACAGCCAATCAGAT
 60 | GGAAAATTTGTTTCATA
 61 | AAAGAAATTCCAGAGAGTCATCAGAA
 62 | GGAAAAACAAAGGTAATG
 63 | TTGAAAATATGTGTAATATGTAAAACATCGTGA
 64 | CTGGTGTAAT
 65 | GCACTGGAAACCCTGAGTTTCAGGAC
 66 | GAGCACTGAGGTCAGTACAG
 67 | TGTTTTAGTCAGAGCAT
 68 | TAGCCATGAGCCAGGAG
 69 | GTGGGTGGATGAGTA
 70 | TCAGTGGGCGTTGCGCCACGATC
 71 | CCTGTGGTCA
 72 | GTTGTGTAAT
 73 | TCATGACACCAT
 74 | AATTTTCCC
 75 | GGAACATTTTGCGCAAGACATTTCCCAAG
 76 | AGATTGTGCCACAGCT
 77 | TTCAGAAAT
 78 | AGGGGGCTGAGGAAATACTGAACA
 79 | GGAACATTTTGCGCAAGACATTTCCCAAG
 80 | AGATTGTGCCACAGCT
 81 | GCAGCATTTGCAAGATTTTTTTCCACTC
 82 | GTTAATTATTGGCAAATTGCCT
 83 | TATGTTTGCTCA
 84 | TATGATTTTGTAATGGG
 85 | AACCAATGAAATG
 86 | ATTGGTTAAAGAA
 87 | CAAAGTTGAGAAATTTCTATT
 88 | TTTCGAAA
 89 | TGGGATTATGCAAGATCAAAC
 90 | AGGGATTGCTCCATTAGTGGA
 91 | CTAGATGGCGCAATCTGGG
 92 | AGGGGGCTGAGGAAATACTGAACA
 93 | GGAAAATTTGTTTCATA
 94 | GGAAAAACAAAGGTAATG
 95 | TGAAAATATGTGTAATA
 96 | CTGGTGTAAT
 97 | TGAGCTCA
 98 | TACTCACAGTATGATTTG
 99 | AGACAGCCAATCAGAT
100 | CCTGGGTCTTATCAGGGA
101 | ACACACATATCGCACACA
102 | CTTATCTGT
103 | AGATAA
104 | CCACCAGCACCTGTC
105 | ACCCATCTGTCCTTGGCCATTTGCTGAGTC
106 | TTGTACATATCCTGGGAACAGCTGACAATGCAG
107 | CCCAACACCTGCTGCCTGAGCC
108 | AGGGGGATTTTCCCT
109 | CTGGGGACTCTCCCT
110 | GGGGGCTTTCC
111 | TTGAAAATATGTGTAATATGTAAAACATCGTGA
112 | ATGCAAAT
113 | CCGCCC
114 | TTTCCCGC
115 | CCCCGCCCCCTGGAA
116 | GGGGCGT
117 | GGGCGT
118 | GGGCGG
119 | TGCAC
120 | CTGCACTCCGCCC
121 | CCAAGCTCCGCCCTACTACA
122 | CTCACCTCCGCCCCCCGCCCGTCGCT
123 | GCTCCGCCCC
124 | CCCGTCCCCCGCCCCCGCCCCCGAGAA
125 | AACCCTCCCCCCTCCCTGCTTCCTGCCT
126 | TTCCAAATTGGGGGCCGGGCCAGGCA
127 | TTCTGATTGGCTGGGGGCCGGGCTGCT
128 | TTCTGATTGGCTGGGGGCCGGGCTGCT
129 | GCCGCCGGGGTGGGGCTGAG
130 | TGGGCGGGGC
131 | GGGGGGGGGGGCGGGGC
132 | TCCGGAAGGCGGGGTCT
133 | GGGCGTAGCGTGGGCGGGGCTGTG
134 | GTGGGGGCGGGGCCTT
135 | GGGGGCGG
136 | CCGCCC
137 | CCCGCCCC
138 | GCGGGGGCG
139 | GCGCGGGCG
140 | GAACAGGAAGTGAGGCGG
141 | CTGCACTCCGCCC
142 | CACAGTGGGTGGAGCCTGT
143 | GGAAAAACAAAGGTAATG
144 | AAAGAAATTCCAGAGAGTCATCAGAA
145 | TGAAAATATGTGTAATA
146 | TTATTTTTCCA
147 | CTCATTTTCCCTTGGTTTCAGCAACTTTAACT
148 | ATTTTCCAATGTAAA
149 | GCACTGGAAACCCTGAGTTTCAGGAC
150 | TGACGTCA
151 | TGCGTCA
152 | GTGACATCAT
153 | ATGAGTCAGA
154 | GCCTGCGATGATTTATACTCACAGGA
155 | CTAAGGGGTCA
156 | GTGACTAA
157 | TGAATGACTCACCTTGGCACAGACACAATGTTCGGGGTGGGCACAGTGCCTGCT
158 | GGCATAATGGGTCTGTCTCATCGTC
159 | CCAAGCGTGACTGC
160 | TGAATCA
161 | TGCGTCA
162 | ATGAATCATC
163 | GCAAGGATGAGTCAAGCTGCGGG
164 | TGAGTAA
165 | ATGAATCAT
166 | TCCTCCTCCCCTGATGGGGACAGAGGTCTCA
167 | CCCCGCCTCAGGCTCCCGGGG
168 | GAGGCAGACCACGTGAGAGCCTGGCCAGGCCTTCC
169 | GCCTGCAGGC
170 | TGGCCTGCGGCCAGAGGGCACCCACGTGACC
171 | GTGCCTTCAAAGAATCCCACCAGAATGGCACAGGTG
172 | CTCAGCCTGCCCCTCCCAGGGATTAAG
173 | GCGCCGAGGCGTCCCCGAGGCGC
174 | CCGCCCGCGGC
175 | GCGGCCGGGTGTTTCGCCTGG
176 | AGCCCGCCGGC
177 | CGGGTGTTATTCAAGCAAAAAAAATAAATAAATACCTATGCAATAC
178 | TTTGGAAGTCAATATTTTG
179 | CCTTTTATCTGTTTTGACAGTCTGGG
180 | GGATGTTACACAAGCAAACAAAATAAATATCTGTGCAATAT
181 | TTGGAAAAGTCAAGGTTTTG
182 | CCATTTCTTTATGATTTGATAGTCTGAG
183 | TGGGTGTTATATGAGCAAACAAAATAAATACCTGTGCAACAT
184 | CACACTTGGAATTAGCAATAGATGCAATTTGGGACTTA
185 | GACCTTTTGCAATCCTGG
186 | ACTGAAAAGCTTAGGAAATGGTATTGAGAAATCTGGGGC
187 | AAGTGTGAAGCAAGA
188 | AATTACGAAATGGA
189 | TATTTGCAGTGATGTAATCAGC
190 | TCTCCTGCAGTAAGGTAGGT
191 | GGGCGATTGGGCAACCCGGC
192 | GGGAGCCTCTTGAGTCAAATCAGT
193 | TTACCTCA
194 | TAAAGCATGAGTCAGACAGCCTCTGG
195 | GTGACTAA
196 | GTGACGTCAC
197 | TGACTCA
198 | TGCGTCA
199 | CACTACCGCTTCCTCCAGATGAGCTCATGGGTTTCTCCACCAAG
200 | TGAGTCAG
201 | ATGAATCAT
202 | CGTCATACTGTGACGTC
203 | TAAC
204 | TAAC
205 | ATTGAA
206 | TGGTGAGTGGAGAAGG
207 | AGCCAAGCTGTCAACTTCCAGTTC
208 | ACCGGCAGTTAGGATACTCCTAAG
209 | CAAAAAAGGGGCGTGAACTTGGA
210 | CGGAAAAAGCGTTTCGC
211 | CTTTCCAACTGCCCGCTAATTCCG
212 | GGGGCGGGGCGCGCGGCAGGGTCGTTACGAAG
213 | GAGCGATATAAACGGGCGC
214 | CACGTG
215 | CACGTG
216 | CACGTG
217 | CACCTG
218 | GGCCACGTGACC
219 | CGTCACGTGGCC
220 | CAGTTG
221 | GCCCACGTGGCCAG
222 | CACCCGT
223 | GACCAATGATTATTAGCCAAT
224 | CCCGAGCCGCTGATTGGCTTTCAGG
225 | CCAAT
226 | GGCCAGCCTTGCCTTGACCAATAGCCTTGACAAGGCAAACTT
227 | ATCCAGTG
228 | CTCGGTGATTGGCTCAGAAGGGAAAA
229 | GCCGAAAGTTCCCGTACGTCACGGCGAGGGCAGT
230 | GTGACGTT
231 | TTGAATGACGTCAAGGCC
232 | ACTGATGACGTCCATG
233 | GTGACGCAAT
234 | GTGACGTCAC
235 | TGACGTCA
236 | TGACGTCATGGTAAAAATTGACGTCA
237 | TGACG
238 | TGACATCA
239 | TATGGTCATGACGTCTGACAGAGC
240 | AATGACATCACGGC
241 | CGTCATACTGTGACGTC
242 | GTGACGTT
243 | TGGGAAGTGACGGAAACGGAGAC
244 | AAGCCTGACGGAATCACC
245 | GACGCGTGACGTCACAACAAGC
246 | GTGACGTCAC
247 | TGACGTCATGGTAAAAATTGACGTCA
248 | TGCGTCA
249 | CTAGCACGTCACTTT
250 | AATGACATCACGGC
251 | CGTCATACTGTGACGTC
252 | TTTGGCGG
253 | TTTGGCGC
254 | GCGGGAAA
255 | GATCGCGC
256 | GCGCCAAA
257 | TTTCCGGG
258 | TTTCCGCG
259 | TTTCGCGG
260 | GCGCTAA
261 | TTTTCGCGC
262 | CCCGCCAGG
263 | TGGGAGAGATGGATATCATTTTGGAAG
264 | GTTGCAGATAGATGAGG
265 | ATCCAGTG
266 | TAAGTAGA
267 | GGCTATAA
268 | ACTATCTCAATGCAAATATCTGTC
269 | GGCCAGCCTTGCCTTGACCAATAGCCTTGACAAGGCAAACTT
270 | TTGATAAGAA
271 | TCAGGTTTTATCGGGGGCAGC
272 | GGAGATTAGA
273 | ATTGATAGGC
274 | AGATAACA
275 | TCCCCTGCCTATCAGCTGATGAT
276 | GTATCT
277 | TATCCGGT
278 | GCAGATGGAAA
279 | AAGTCTGCCTATCTC
280 | CTATCT
281 | TGATAAG
282 | ATTACACCAAGTACC
283 | GGAATTTCCTGTTGATCC
284 | ACCTAAGCTG
285 | CTAAAGGACGTCACATTGC
286 | ATATAGGA
287 | TGGTTAGTAATTACTAA
288 | GATATCTATTTAACTGATTTCACCC
289 | TTTGTAATAAATAACTCA
290 | CAATGTTGGAAAATTATTTACAT
291 | AATATGGCTGGTTG
292 | AGGCTAGAGTAGA
293 | TGCGGCGCTGCCAATCATTAAC
294 | CAATTACTAATTAACTTAG
295 | AAGATTATTAAAC
296 | TGGTTAGTAATTACTAA
297 | TCTAGTTAATAATCTACAAT
298 | CGTCTCATTACACATTAACT
299 | GATATCTATTTAACTGATTTCACCC
300 | CGGAGCCCGGGCCAAT
301 | TTGGGCTGGCCGCCCCCCAGGGC
302 | AAGTACCCTTCAATCATTGG
303 | TGGCCTGCGGCCAGAGGGCACCCACGTGACC
304 | CCCGATTGCTTTAGCTTG
305 | AACTGTGGAGACTGTTACGTCAGGGGGCATTGCCCCATGGCTCCAAAATTTCCC
306 | ACGTCACATTGCACAATCTTAATAA
307 | TTTGTGCAATTTCACTTATGATACC
308 | ACACAACTGGGA
309 | TTGTGTAAC
310 | AGGATTTGCTTCAGACACTGA
311 | TCCGGGAATTTCCCTG
312 | TCCGGGAATTTCCCTG
313 | TCCGGGAATTTCCCTG
314 | GCTTGGAAATTCCGGAGC
315 | GTGGGAAATTCC
316 | GGGGAATCTCCC
317 | AAATGTGGGATTTTCCC
318 | GGAATTTCCT
319 | ATTGGGGATTTCCTC
320 | TGGGGGCTTCCCC
321 | GCCTGCGATGATTTATACTCACAGGA
322 | ATCCAGTG
323 | TAAGTAGA
324 | TATCTCAATGCAAATATCT
325 | ATGCAAAT
326 | ATTTGCAT
327 | TTAATTGCATGAATTAGAG
328 | GGTGGGGCGGGGCGGGG
329 | CACTTTTAGCTCCTCCCCCCA
330 | ACACTAAATGAAAGGGCGGGGCAG
331 | TGTGTGGGAGGAGCTTCTAAATTAT
332 | CCCATAGTGTTTCCAAACTTGGAAAGGGCGGGGGAGGGCGGGAGG
333 | GGCAGGGCGCC
334 | GGGGGAGGGG
335 | TGCCCCCTACCC
336 | GCCCCTCCCCA
337 | GCCCCCTCCCC
338 | GCCCCCCACCCCTGCCCCC
339 | GCGGCCCTCC
340 | GGGCGGGGCGGGGGCTCC
341 | GAGAGGGCGGGCCCCG
342 | GGCGGGCGGGGCGGGAGGCGGGGCCCGGCCC
343 | GAGGCGAGGCTAAGCGTCTCCG
344 | GCCCGCCC
345 | GGGCTATGTGCTCACTGAGCCTCCGCCCTCTTCCT
346 | GGGTGGGGTGGGTGGAGCCAGGGCC
347 | AGAAATGAGAGGGGAGGGGACAGA
348 | AAAAAAGAGGAGGGACAAAAGA
349 | TGACGGGCGGGCCCGCCCCCCT
350 | TCCTCCCCACCTTCCCCACCCTCCCCACCCTCCCCATAAGCGCCCCTCCCG
351 | GAGGGAGGG
352 | GGAGGGGAGGGATGGGC
353 | GCAAACTCCGCCTCCCCCAA
354 | GCCAAGGGGTGGGCTGAGGAAC
355 | CCCTCTGGTCCCGCCCCCTCCAG
356 | ACTGCTTCCCGCCCTTCG
357 | TTTGATGCCCGTCCCCTCTACCC
358 | TGCCGAAGACCCGCCTTCTTCTC
359 | CTCTGTGGGCGGGTC
360 | GCCCCGCCCCGCCCCGCCC
361 | GCGCCGCCCCACTC
362 | ATCCCTCCTC
363 | GTCCCTCCTCCTCCCGCCC
364 | TCCGCCCCCCGCACGG
365 | CACTTTTAGCTCCTCCCCCCA
366 | TTGGGCTGGCCGCCCCCCAGGGC
367 | CTAAACTCCACCCATGGGTT
368 | GGGGCC
369 | GGTGGG
370 | GTTCAGAAGTGGGCGGGTGTG
371 | TGTGTGGGAGGAGCTTCTAAATTAT
372 | TGGGGGCGGGGCCGT
373 | GGGGCGGCAC
374 | GGCATAATGGGTCTGTCTCATCGTC
375 | GGGCGGGGCGGGGCGGGGCCGGGCGG
376 | TCCGGGGCGGGGGCGGGGCCT
377 | AATCCCACCCTCACT
378 | CTCCCAGTTGAGAAAGGCGGGAAAATC
379 | GTAGGGGAGGGGACTTAG
380 | GGGGTTAAGAGGCTGGGCCT
381 | CCTGCCCCTCCCAGGGATTAAGAG
382 | ATAAAGGGGACTGTCCACCCAGA
383 | GGGGCGGGG
384 | GGGCGG
385 | GGCGGG
386 | CCCCTCC
387 | AGGGCGG
388 | GGGTCCCGCCTCCTTGAGGCGGGCCCGGGCG
389 | GAGAAAAAAAAATGCCATGTGGGAGG
390 | TTCCCTTCCTCCGAAACTTCCCAGGAGAAGGGCGGAAGACCCCAGGGGAAGGGGCGAGGCGAATCTTCGCG
391 | CTCCGCCTC
392 | CCGCCC
393 | CCCAGCCCC
394 | CCCAGCCCC
395 | CCGCCC
396 | GGGGCCGG
397 | GGGGGCGG
398 | GGCGGGG
399 | GGGCGG
400 | CCGCCCC
401 | CCCCGCC
402 | GGGGCGGCGGC
403 | AGGGCGGGCGG
404 | TGGGCGGGCC
405 | AGGCGG
406 | GGGAGGGTGGGG
407 | CACCACCCCTGCAGCCCCCTCCCC
408 | CCATGAATGG
409 | CCAAATAAGG
410 | CCTTACATGG
411 | CCCTATTTGG
412 | ACACCCAAATATGGCTCGAG
413 | CAGGATGTCCATATTAGGACATC
414 | CCTTTTATGG
415 | CGCCCCAGCACACATGATCAGA
416 | CACACCCATGACCCACGTGATGCTG
417 | CACGTG
418 | GAGGCAGACCACGTGAGAGCCTGGCCAGGCCTTCC
419 | CTGGCCCACGTGACCCGC
420 | CTGATGACGTCCATGTGTCATTAGT
421 | TGGGAGAGATGGATATCATTTTGGAAG
422 | GGCATTTTGTGGTCACCATTAATCATTTCC
423 | GGCATAATGGGTCTGTCTCATCGTC
424 | GTGCCTTCAAAGAATCCCACCAGAATGGCACAGGTG
425 | TTTGGCGC
426 | CCCCGCCCCGCGCTCCCC
427 | CTCGTGGCGCCCCAGGG
428 | TTTGGCGC
429 | TTTCGCGGCAAA
430 | TTTGGCGCGTAA
431 | TTTCGCGCC
432 | TTTCCCGC
433 | ATTACACCAAGTACC
434 | GGAATTTCCTGTTGATCC
435 | ACCTAAGCTG
436 | CTAAAGGACGTCACATTGC
437 | ATATAGGA
438 | TCCTCCTCCCCTGATGGGGACAGAGGTCTCA
439 | CCCCGCCTCAGGCTCCCGGGG
440 | GAGGCAGACCACGTGAGAGCCTGGCCAGGCCTTCC
441 | TGGCCTGCGGCCAGAGGGCACCCACGTGACC
442 | GTGCCTTCAAAGAATCCCACCAGAATGGCACAGGTG
443 | CTCAGCCTGCCCCTCCCAGGGATTAAG
444 | GCGCCGAGGCGTCCCCGAGGCGC
445 | CCGCCCGCGGC
446 | GCGGCCGGGTGTTTCGCCTGG
447 | AGCCCGCCGGC
448 | TCCCCATTAACG
449 | AATCACCGCGAACGGA
450 | GGCGTTATGTCACTAACGACGTGCACCA
451 | CGGGGATAATAGTATTAACACCG
452 | ATCTCTCGCAACG
453 | ATCACTATATACGTGAA
454 | CGTTTATAGTGAC
455 | CACCGGCGGTCTTTCGTCCGTGC
456 | TATCGGGGCGGATCACTCCGAAC
457 | ATACTTCGGAGCACTGTTGAGCG
458 | AGCGCTCGGACAACTGTTGACC
459 | CGGCGCACTCTCGCCCG
460 | TTGACTCTT
461 | ATGAATAAT
462 | ATGACTGCT
463 | TGACGA
464 | GAGTCA
465 | TAGTCAGGGAAGTCA
466 | TTACTC
467 | TGACTC
468 | TGACTC
469 | TGACTC
470 | CAGTCA
471 | TGACTA
472 | GAGTCA
473 | TGAGTG
474 | AAGTCA
475 | TGATTC
476 | TTGACTCTCTAAAAAATGATTCAT
477 | ATGACTAAT
478 | GACTTCCTGTCTTCCTATTGATTGC
479 | AGCTTCCTCTAT
480 | TCTGGCATCCAGTTT
481 | ACAATATGGACTTCCTCTTTTCTGG
482 | CTGATCCGAGCTTCCACTAGGATAG
483 | CATCC
484 | AGACATCGGGCTTCCACAATTTCG
485 | AAGTACAT
486 | TTCCTAATTGGGTAA
487 | CTGTCATTGTGACACTAATTAGGAAA
488 | ATGTAATTACCTAATAGGGAAATTT
489 | TTTCCGAATTAGGAAT
490 | TTTCCTAATTAGTCCTTCAATAGAAC
491 | CTTCCTAATTAGGCCATCAACGACAG
492 | TTTCTTCATTGGTACATCAATGCCAG
493 | TTCCTAATTGGGTAA
494 | CTGTCATTGTGACACTAATTAGGAAA
495 | ATGTAATTACCTAATAGGGAAATTT
496 | GCACCCAAACACCTGCATATTTGG
497 | GGCGTTATGTCACTAACGACGTGCACCA
498 | TGCACCCATACCTT
499 | ACACCCAGACATCGGGCTTCCAC
500 | ATCTCTCGCAACG
501 | ACACCCAGACATC
502 | ACACCCAGACCTC
503 | AACATCCGTGCA
504 | TACATCCGTACA
505 | AACACCCAAGCACAG
506 | ACCTCCGTACATTCATGTTGCACCCACACATTTATACACCCAGACCGCG
507 | AACAAAGCACCCAATCACCACCCTTC
508 | ACCCAGACACGCTCGA
509 | TTACACCTGGACACCCCTTTTCTGGCATCCAGTT
510 | TCTTGTGGTGGTTACTC
511 | AGCCGCCGA
512 | AATTAGCCGCGCAAGTT
513 | CTCTGGCTGCAGGCTAG
514 | CAAGAACCGCCAAGAAC
515 | TCCTAGCCACCTCAAGG
516 | TATCCCTGCGCGGCTAAAG
517 | TTGGAGCCGCCAAAAAA
518 | GCCTAGCCGCCGGAGCC
519 | TGTTAGCCGCCGAAACG
520 | AAATAGCCGCCATGACC
521 | TCCATCGGCGGCAAAAG
522 | CTCTAGCCGCCGACGAC
523 | 


--------------------------------------------------------------------------------
/Dataset/DP-MFSC_Dataset/chrUn.txt:
--------------------------------------------------------------------------------
  1 | GAATTTATTAAGTGTTGGATTGTTTATTTATTAATAGGGAATGTGAGTTG
  2 | GGTTTAGATTGTTGTGAGATAGGTTAGTTTTATTTTATTGATGATGTGTT
  3 | GTTGTTATGGTAATTTTGTTTAGTATGAGAGGAATTGTAGGTTTAGATAT
  4 | TTGGTGTATGTGTTTGGTTGAGGAGTTAATGGGGTGAAGTTATTATTTGT
  5 | GGGATTATGATTGAATGTTTTTAAGTTAGAATTTTGTTTAGGTGGAATGA
  6 | TATGGTAGTGTTGAAGGAGTTTTGGTTGGTTTTGGATAGTTGGGTTTTTG
  7 | TTTGTTTTTGTTTGGTGGGGTTTTTGTGTTGTTTTTGTGGTGGTGTGGGG
  8 | TTTTTTTTTGTTGGGTGTTGGGATTGGGGTTTGGTGTGGAGAGTTGTTTG
  9 | TTTTGGGAAATGGGGTGTGGTTGGAAAGGGGGTTGTTTTTTTGTTTGTTA
 10 | TGTTGAATGTATGTTTGTGTGGAATTTGGTGTTAAATTATTTGTAGATGA
 11 | TTTGTTTTTGGGTTGGGGTTTTGTATGTAGTAGAGTAGTTTTTTTGTTGT
 12 | GATTTATTGAAAGTTAGTTTTTGATATAAGGGTTTGTTTTTGTGGGTTTT
 13 | TTTGTGGTATGTTTGTTTGTTTGTATGTGATTGTGTTGTTGTTTGGGTGT
 14 | TATGGGGGTGGTTGTTTTGGTTTTTGTGTGGTTGTTTGAATGATTGTGTG
 15 | GTGGTTGGGGGGGGATTGTTTTTTTTTTTGTTTTTTGAGGATGGTTTGTT
 16 | TTTTTTTTTTTTTTTGTTGTTTTTTTTGGGTGTGGGAGTTTTGTGTTGTT
 17 | GTGATTGTGGTTTGTTGTTGTTTGTTGTTGTAGTTTTTTGTTTTTTGGTT
 18 | TTGGTAAGTTGGAGGGTGGAGGAGGGGGATTGGTGGTGGTGGTGGTGATT
 19 | TGGGTTGGTGATTGATGGTGGGATTTTTATTTTTGGTGTGTTTGTTGGGG
 20 | ATGGTTGGTTGGAGGGGTGGGAGGGGTTTTTTTTGTGAATGTTGTGTTTG
 21 | GTGTTAGGTTTTTGGTGGTTGGGGGGGTGTTTTTTTTGTTTGAGTATTTT
 22 | TATTTTTGTTTTTTTTTTTTGTGTGTTGTGGTGGTGATGTGTGTATGAGG
 23 | GGAGGATGTTGTGGTGTGGAGGTGGAGAGGGTTTGGTGTGGTGTTTTTTT
 24 | TATTTTTTTTTTTTTAATTTTGGAGGTTGATTAGTATTTTGGGTGATATT
 25 | TTGTTTTTTTTTTTTTTTTTGATGTTGGAGGTTGATTAGATGTTTGAAAG
 26 | TGTTTTTTTTTTTTTTTTTTTTTTTTTGGTGTGGAGTGGTGGGGTTATTT
 27 | TGGATTTTTTTTTTTTTTTTTTTTTTTTTTTTAAATTTTTGGAATTTTTA
 28 | GGTTGATTAGTTGTTTGTTTTTTATTTTTTTATATAGGTTGATTAGTATT
 29 | TTGGGTGGTATTTTGTTTTTTTTTGAAAATTTTAGAGGTTGATTAGATAT
 30 | TTGAAAGTTTTTTTTTTTTTTTTATTTTTTTTTATAGTGATTTTTTTTTT
 31 | TTTTTTTTTTTTTGGTGTGTTTTTTTTTGATTTATATATATGTAAATAGT
 32 | GTGTATGTTTATATATTTATAGGAGGAGGTTGATTAGTATTTTGGGTGAT
 33 | ATTTTGTTTTTTTTTTTTTTTTTATTGATGATGGAGGTTGATTAGATGTT
 34 | TGAAAGTGTTTTGTTTTTTTTTTTTTTTTTTTGTGATGTGGTGGGTTTAT
 35 | TTTGGATTTTTTTTTTTTTTTTTTTTTTTTTTTAAATTTTTGGAATTTTA
 36 | AGGTTGATTAGTTGTTTGTTTTTTATTTATTTATATAGGTTGATTGGTGG
 37 | TATTTTGTTTTTTTTTTAAAATTGTAGAGGTTGATTAGATGTTAGAAAGT
 38 | TTGGTGGTTGATAAATTATTTGATTTAGATTTGTTTTTTTGTTTTTTAGT
 39 | TTTGTGTTGTTTTGTGTTGTTTTGTTTTGTTTTGTTTTGTTTTGTTTTGT
 40 | TTTGTTTTGTTTTGTTTTGTTTTGTTTTGTGTTGTGTTGTGTTGTGTTGT
 41 | GTTGTGTTGGGTTGGGTTGGGTTGGGTTGGGTTGGGTTGGGTTGGGTTGG
 42 | GTTGGGTTGTGTTGTGTTGTGTTGTTTGGTTTTGTGTTGTTTGGTGTTGT
 43 | TTGGTTTTGTTTTGTTTGTTGTTGTTTTGTGTTTTGTGGGTTGAATAGTT
 44 | GTTTTTAATTGAGTTTTTTTGTATATAAATATGTATTTTTTTTAAAATAA
 45 | ATTTTTAAAATAAATGTGAAAATTGATTAATTATTTTTTTTTTTTTTTTT
 46 | TTTTTTTTAAAAATTTTTTTTTGTGTGTGTGTGTGTGTGTGTGTGTGTGT
 47 | GTGTGTGTGTGTGTGTGTGTGTGTGTGTATGTGTGTGTGTGTTTGTTTTA
 48 | TAAATATTTATAATAATAGGTTGTTGGGTGGTGGTAGTTGTAATTTTAGT
 49 | ATTTTAGAGGTAGAGGTAGGTAGATTTTTGAGTTTGAGGTTAGTTTGGTT
 50 | TATAGAGGAATTTTGTTTTGAAAAATGAAAATAAATATATATATATATAT
 51 | ATATATATATATATATATATATATATATATATATATGAGGTTGATTAGTT
 52 | GTTAATTTTTTAGAATTTTGTTTTTAATTAATGTGATAGAGAGATAGATA
 53 | ATAGATAGATGGATAGAGTGATATAAATATAGGTTTTTTTTTTTAGTAAA
 54 | TATGAGGTTGATTAATTATTTTTTTTTTTTTTAGGTTTTTTTTTTTTTTT
 55 | TTTGTTTATGTGGTTGTTGGGATTTGAATTTAGGATTTTGGTAGGTTAAT
 56 | TGGTAAAATGTGTTTTTTATATATATAAATAGTGGTTTGTTTGTTGTTTG
 57 | TTTGTTTGTTTGTTTGTTTGTTTGTTTGTTTGTTTGTTTGTTTGTTTGTT
 58 | TTTTTTTTTTTTTTGAGATAGTATTTTTTTGTGTAATTTGGTTGTTTTGA
 59 | AATTTATTTTGTAGATTAGTTTGGTTTTAATTGAATTTAGAAATTTTTTT
 60 | GTTTTTGTTTATTTTTTAATTTTGGGAGTAAAGGTGTGTTATATTATTGT
 61 | TTGGTATTATTATTATTATTATTATTAATTTTATTATTAGATAGAATGAA
 62 | ATTAATTAGTTGGTTTTGTTTTGTTAATTTATTTGAAATTAGTTGGATTA
 63 | ATTAGTTGGTTGGTTTGGGAGGTTTTTTTTGTTTTTGATTTGGGTGTTTG
 64 | TGGGGTTGGGGATTAGGTATTTTAATGGAATGTATGAAGGTTAAGGTGAG
 65 | ATGGTTTGATTTTTGTAAAGATTATTTTTTTTAGTTTGAGGAAAAAATAA
 66 | AATATTGGGTTATGTTTTATTGTTTTATTTTTATTTTTTTTTTTTTTTTT
 67 | TTTTTTTTTAGATAAGGAGGTTGGTTAGTTTTTTTTGTTTTTTGGAAGAT
 68 | GTAGGTATTGTATTGGGAAGTATTGTTTGAGAGATGTGTTAGTGAATTAG
 69 | AGAGTTTGGATGTTAAGTTGTATAATGTTTTTTTTAAAAAAGTTTTAATA
 70 | AAGGGATTTTTAATTTTTTTTTTTTTTTTTTATTTTTTTTTGTAGGTTAT
 71 | TAGTTTTTGTATAATGAAATGTGAGTTTTGTTTTGTTTTGTTGTTTTTTT
 72 | TTTGGTTTTGTTTGATATGGTTTTTTTTTTTATTTGTGTAGGGTTTTTAG
 73 | ATTGTTTTTTGAGAATAAAATGGGAGGTTATAATTAAAGTTTTTTGGATA
 74 | AAGTATTATAATGGATAATGTAAGGAAGGTAGTTAAATGTTTATGTTTTT
 75 | TAAGGTATAGATTTTTTTTAGTATGGGAAAGATTTTTTTTTTTTTTTTTT
 76 | ATTTGTTTTTTTTTTTTTATTATATATTTAATAAAATAAAATAAAATAAG
 77 | ATAAGATAAGATAAAATAAAATAAAATAAATGAATGAATGAATGAATGAT
 78 | GTTTTTAGTTATTTATTGGTTTAAATTATTTAAATTTTTTTTTTATATTT
 79 | TTTTTTATTGTTTTTATGTTGTTATTTTTTTGTGGGGGTAGGGTTAGGTA
 80 | TATTTGTGTTTTATTTTTTGAATTATTTGTTTTTTGGTTTATATTGTTTT
 81 | AGTGTAATGTAGTTTTTTGGAAATGGTAATGTTAATATATTTTATTAGAA
 82 | ATGGTAATGTTAATATATTTTATTAGAAAGAGGAAGGTTTTATTTATTTA
 83 | TTTATTTATTTATTTATTTATTTATTTATTTATTTATTTTTAATTAGTTT
 84 | TGTTTTGTTATTTTAAGGATTTTTAAGGATAGAATATTTTGGATAGTATT
 85 | TATATGGTTTGATATTTTTAAATTTTGGTTTTGGTTTTGGTGGTTTTTTG
 86 | TTTTTTTGTTTTTGTTTTTTTTTTTAGATAGGGTTTTTTTGTGTAGTTTT
 87 | GGTTGTTTTGTATTTTGTGTAGATTAGGTTGTTTTTAAATTTAGAAATTT
 88 | ATTTGTTTTTGTTTTTTAAGTGTTGGAATTAAAAGTGTGTGTTTATTTAT
 89 | TATTGTTTGGTTTTATTTTTTTTAAATATTATGTATGTATTATGTATGTA
 90 | TGTATGTATGTATGTATGTATGTATGTATGTATGTATTTTTTTTTTAAGA
 91 | TTTATTTATTTATTATATGTAAGTATATTGTAGTTGTTTTTAGATATTTT
 92 | AGAAGAGGGAATTAGATTTTGTTATATATGGTTGTGAGTTATTATGTGGT
 93 | TGTTGGGATTTGAATTTTAGATTTTGGAGAGTAGTTAGGTGTTTTTATTT
 94 | ATTGAGTTATTTTATTAGTTTGTATGTATGTATTATTATGTATGAAATTA
 95 | TATTGTAGTTGTTTTTAGATATATATTAGAAGAATATATGGGATTTTATG
 96 | GTAGATGGTTGTTGGAAATTGAATTTAGGATTTTTGGAAGAGAGGTTAGT
 97 | GTTGAGTTATTTTTTAAAATAAAATTTGTGGAGAAATTGAGTATTTTAAA
 98 | ATTTTAGGTATTTTTTTTTTTTTTTTTTATGTGGTTATGATGATTATTTT
 99 | TTTTTTATTTTTTTTTTTTTTTTTTGTTTTAAAGTTGTAAAATTATAAAA
100 | TAATAGTAATAATAATTTTTAGTTATTTGTGTTTGTTTGTTTGTTTATGT
101 | GTTTATATTTATTTATTTATTTATTTATATTTATTTATTTATTTATTTTT
102 | ATTTATTTATTTGTATTTATTTATTTATTTATTTATTTATTTATTTATTT
103 | ATTTATTTATTTATTTATTTATTTATTTATTTATTTGTTTTAATATTATT
104 | TAGGTGTGGTGGTGTATGTTTTTGTTTTTAATATTTGGGAGGTAGAGGTA
105 | AAAAAAATAAAATAAAATAAAATAAAATAATAATAATAATAATATTAAAT
106 | AAAGTTTGGGTTTTAATGAAGTAAGTAAGGTATAGGATTTGATGAATTTG
107 | TATGAATTATTTTTTTAGAGTTTATTGGAGTTTAAAGGATTGAGTGTTTG
108 | GGATTGTTATATATATATATGTATATGTATATATATTTTTTTTTTTTTTT
109 | TTTTTTTGAGTTGAGTTATTTTTTTTATTAATTTGGGTTTTTTTTTTTTT
110 | TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT
111 | TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT
112 | TTTTTTTTTTTTTTTTTTTTTTTTATTTTGGGGTTAATTTAAAATATAGA
113 | TTGTTTTGAGGTAAATTTAATAAATTTTTAGTTTTTTTTTGGTTTTTTTG
114 | TTTTTTTTTTTTTTGTTTTTTTGGGTGTTTTTTTTTTTTATTTTTTTTTT
115 | TTGTTTTTTAGGAGTTTTTGTTTAGTTTTTATTTATTTATTTTTTTATTT
116 | TTTTTGTTTTTATTAAAAGTGAAGAAGAAGAAGAAGAAGAAGAAGAAGAA
117 | GAAGAAGAAGAAGAAGAAGAAGAAGAAGAAGAAGAAGAAGAAGAAGAAGA
118 | AGAAGGGTTGGTGAGATGGTTTAGTGGGTTAGAGTATTTGATTGTTTTTT
119 | TGAAGGTGTAGAGTTTAGGTTTTAGTAATTATATGGTGGTTTATAATTAT
120 | TTGTAATAAGATTTGATTTTTTTTTTTGGAGTGTTTGAGGATAGTTGTAG
121 | TGTATTTATATATAATAAATAAATAAATAAATAAATAAATAAATAAAAAA
122 | AAAAAAAAGAAGAAGAAGAAGAAGAAGAGGAGGAGGAGGAGGAGGAGGAG
123 | GAGGAGGAGGAGGAGGGGGAGGAGGAGGAAGAGGAGGTTGATGATTTGAT
124 | TTTTTTTTTAATTGGTAGGTTAATTGGTAAAATGGGTTTTTTTTTATATA
125 | TATAATATATATAATATATATATAATTAAATATATATATATATATTTTAA
126 | AGAGTAATTTGTAAATAGTGGTTTGTTTGTTGTTTGTTTGTTTGTTTGTT
127 | TGTTTGTTTGATTTTTTGTTTGTTTTTTTTTTTTTTTTTGAGATAGTGTT
128 | TTTTTGTGTAGTTTTGGTTGTTTTGGAATTTATTTTGTAGATAAGTTTGG
129 | TTTTAATTGAATTTAGAAATTTTTTTGTTTTTGTTTGTTTTTTAATTGTT
130 | GGGAGTTATTATTATTATTATTATTATTATTATTATTATTATTATTATTA
131 | TTATATTAATTAGTTGGTTTTGTTTTATTTATTTATTTGAAATTAGTTGG
132 | TTGGTTTGGGAGGTTTTTTTTTTTTTTTTTTTTTTAAAGATTTATTTATT
133 | TATTATATGTAAGTATATTGTAGTTGTTTTTAGATATTTTAGAAGAGGGA
134 | GTTAGATTTTGTTATGGATGGTTGTGAGTTATTATGTGGTTGTTGGGATT
135 | TGAATTTTGGATTATTGGAAGAGTAGTTGGGTGTTTTAATTTATTGAGTT
136 | ATTTTATTAGTTTGGGAGGTTTTTTTTGTTTTAGATTTGGGTGTTTTTTT
137 | AGTTTGAGGAAAAAATAAAATATTGGGTTATGTTTTATTGTTTTATTTTT
138 | ATTTTTTTTTTTTTTTTTTTAGATTAGGAGGTTTTGTTAGTTTTTTTTGT
139 | TTTTTGTTTTTTATAATTTATGTATATAAGTATGTTTTATTTATAGTGGG
140 | GAAAAATTATGGGGGAAGATGGTAGATATTGTATTGGGAAGATGTGTTAG
141 | TGAATTAGAGAGTTTGGATGTTAAGTTGTATAATGTTTATTATAATATAG
142 | AAAAGTTTTAATAAAGTGATTTTTAATTTTTTTTTTTTTTTTTTTTTTTT
143 | TATTTTTATTTGTTTTTATTTTGTTATTAATGTGGTAGGTTTTGTATAAA
144 | GAATGTGAGTTTTGTTTTGTTTAATAGATATATATTTTTTTTTTTGGTTT
145 | TGTTTGATATGGTTTTTTTTTTTATTTGTGTAGGGTTTTTAGATTGTTTT
146 | TTGAGAATAAAATGGGAGGTTAGAATTAAAGTTTTTTGAATAAAGTATTA
147 | TAATTTTAATTTGTTTGGTTGTTTTTTTTTTTAAGGTATAGATTTTTTTT
148 | AGTATGGAAAAGTATGTAGTAGTTGTAGGATATATTAGATGAGAGTATTA
149 | GATTTTATTGTGGGTGGTTGTGAATTATTTATTATGTGGTTGTTGGGATT
150 | TGAATTTAGGATTTTTAGAAGAGTAGTTAGGGTTTTAAATTGATGAGTTA
151 | TTTTTTTAGTTTTTTATATTTTTTTTTAAGGTATGAATGATTTTAGTATG
152 | GGAAGATAGTTTGTTTTTTTTTTTTTTTGAGTTATTTTTTTTTTTTTATT
153 | ATATATTTAATAAAATAAGTAAATGAATGAAGTTTTTAGTTATTTATTTT
154 | TTTGAGTTATTTAAATTTTTTTATAGTATTTTTTTTTTTTTTATATTGTT
155 | TTTTTTTTTTATGTTTGGGTGGGGTTGGGGGAGGGGTGGGGTGGGGGGTA
156 | GGGATTTGTATGTTTTTTTTGTAGGTTTGTGAATTATTTGTGATGGTTTG
157 | GTTTTTTGAATTGTTGAGTTTTGTTTATTTAGAGGTTGATTGGTTAGTTT
158 | TTTATTTGAAGTTTTTGAGTGATGATTTTTTTGTGAATTTTTTGAATTTA
159 | TTGTTTTTTTAGGTTTATATTTGTTTTGGTTTTGGTAATTGATTGAATTA
160 | AATAATTAGGTTTATATTTAGAATTTTGGAAATGGTAATGGAGTTGATAA
161 | TATATTTTAATAGAAAGAGGAAGGTTTTATTTATTAGTATATTTTTATTA
162 | GAAGTTTTGTTTTGTTAGTAGTTTAGGAATTTGTAAAGTTAATTTGGATA
163 | ATATTTAAATGGTTTGGAATTTTTATTTTATGTTTAATTTTTTTTTTTTT
164 | TTTTTTTTTTTGAGATAGGGTTTTTTTGTATAGTTTTGGTTGTTTTGGAA
165 | TTTATTTTGTAGATTAGGTTGGTTTTGAATTTAGAAATATGTTTGTTTTT
166 | GTTTTTTGAGTGTTGTGATTAAAGGTGTGTATTATTATGTTAGGTTTTAT
167 | GTTTAATGTTTAGTAAATATTTAATAAATATTTAATAAATATTGTGAAGG
168 | TTTGAAGAGATGGATTAGTAGTTAAGAGTATTGATTTTTTTTGTAGAGGT
169 | TTTGAGTTTAATTTTTAGGAATTATATGGTGTTTTTGGAATTTGATGTAT
170 | ATTTTTGGTGTGTGTTGGAAGATAGTTGTAGTGTATTTATATAAATAAAA
171 | AATAAATAAAATATTTAAAAATAAAGTAAAATAAAGATTGTGATGAAATT
172 | GAGTATTTTAATTTTATTTTATTGTATTGTATTTTATATATATATATATA
173 | TATATAGATATATATTTATTGGTATAGAAATTTATATTATTTAGTAAGTT
174 | GGGAGTGGTTGGATTGAATATGTAAAGAAGGAATATTTGTAGTTAGTTAG
175 | TAAAGTTTTGTTGTTGTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGTGT
176 | TTAAATAGTATAGTAGAGTAGTATATGTTATTAATTTTAGTATTTTGGAG
177 | GTAGAGGTAGGTAGATTTTTGAATTGGAGGTTAGTTTGGTTTATAGAGTG
178 | AGTTTTAGGATAGTTTAGGTTATATAGAGAAATTTTGTTTGGAAAAATAA
179 | ATAAATAGATAAATAAATTAAGTAAAATTTAATTTAAATTTTATAAAGGA
180 | TATTATAATAAATTATAGTTGTTTGTGTTTAATAGAAAATATTGTTTTTT
181 | TTTTAAGTAATTTTGGTTTAAGTAAATATAAAATTAAGTAATTATATATG
182 | TATAAATATATAAATATATTAAAATATATATATATATATATATATATATA
183 | TATATATATATATATATATAAAATAAATAATGATAATTAAGTGGTATGGA
184 | GTTGTTTATATAGTTTGGATTTTATTTATTTATTTTATTTTTATTATATG
185 | TTTGTAGAATTTATTTGAGTAGTTGGTTTGATTTGTTTTGTTTGTTTTTG
186 | TTTTGTATTTTGTTTTTTATAAATGAATGAATAGAGAGATAGATATTTAT
187 | TTATTTATATATGTATGTGTGATGGTTTAGAGGGTATAGTTGTTGGTTGT
188 | TAAGGTATAGGTAAAATATTAAGGATTGAGGAAATTAATTTTTTTTTTGG
189 | TTAATTTGTTATTTTGTGTTGTTAATTATTATTATAAGGATATTTTATTA
190 | TAGTTTGTTTTTGTTATTATTAAATAATTATGGTTGGTTGTTTGTTTGTT
191 | TGTTTGTTTGTTTGTTTGTTTATATAGAGAAATGATTTTTTTAATTAATT
192 | AAAATTATTTTTTAAGTTTGTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT
193 | TTATTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT
194 | TTATTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTATATTTATTT
195 | TTTTTATATATATTTTATTTTATTTTATTTGATTTTTATTTTATTTTATT
196 | TTATTTTATTTTATTTTATTTTATTTTATTTTATTTTGGTTTTTTGAGAT
197 | AGGGTTTTTTTGTATATTTTTGGTTGTTTTGGAATTTAGTTTGTAGATTA
198 | GGTTGTTTTGGAATTTTGAAATTTTTTTATTTTTGTTTTTTTAGTGTTGG
199 | GATTAAAGATATGGGTTATTATTTTGGTTATTTTTTAATTTTTTAATTTT
200 | TATTTTTTTTGTTTTTGTTTTTGTTTTTGTTTTTTTGAGATAGGGTTTTT
201 | TTGTATAATTTTGGTTGTTTTGGAATTTATTTTATAGATTAGGTTGGTTT
202 | TGAATTTAGAAATATGTTTGTTTTTGTTTTTTAAGTGTTGGGATTAAAGG
203 | TGTGTTTTATGTTTGGTTTTTATTTTTAAATTTTATTTATTTAATTTATT
204 | TTTGTTTATTTTAAGATGTGGTTTTTTTGTGTAATTTTGGTTGTTTTGGA
205 | ATTTATTGTGTAGATTAGGTTGGTTTTGAATATTTTAATTTGTTTGTTTT
206 | TGTTTTTTAAATGTTGGGATTAAAAGTATTTGTTATTATTGTTTTGATTA
207 | ATTTTTTTTTTTTTGGAAAATATTTTTTTTTTTATTTTTTTTTTTTTTTT
208 | TTTTTTTTTTTTTATTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT
209 | ATTATTTTTTTTTTTTTTTGAGATATGGTTTTTTTGTGTAGTTTTAGTTG
210 | TTTTGTAATTTAAGGTGATTTTGAATGTAGAAATTTGTTTGAGGTTAAAG
211 | GTGTGTTTTATAATTGTTTTAGTTTTATTTTAATTTTTTTAAAAAAAAAT
212 | ATGTGTGTATATATGTATGTATAATTAGAAGTTATATTAATTTATTAAGA
213 | TTTTTAAAGTGAGTTTTAGGAGTATTTAGAGAAATTTTGTTATAATAAAT
214 | AAATAAATAAATAAATAAATAAATAAATAAGAAAGAAAGAAAGAAAGAAA
215 | GAAAGAAAGAAAGAAAGAAAGAAAGAAAGGAGGAATTTTAATTATTATTT
216 | TTAATAAAAAGGTTGTGGAAATTATTTTATGTTTTTTTTTTTTATAGGTG
217 | AGGATGTAGTTGTTTGTAAATGAATATGTTGTGTGTGTGTGTGTATGTGT
218 | TTTTATGGTTAGTTAGTATTAATTTTAGATTTGTGTTTTAGATATATGAT
219 | TTTTTTAGTATTATTGATTATTGAATTTTGATTATGAAGGTATATTGGAT
220 | TTTTATTTTTTGGTTTTTTTTTTGTTATGGTTTTTTTAGATAGGGTTTTT
221 | TTGTATAGTTTTGGTTGTTTTGGTATATTGGATTTTATAATAGAGTTTAT
222 | GTGTGTGTGTGTGTGTGTGTGTGTGTGTGTGTGTGTGTGTGTGTGTGTGT
223 | GTGTAATATTTTTGTTGTGATTGTGATTAATTTTATTTGTTTGAAAATAT
224 | TTTTAATTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT
225 | TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTATTTTTTTTTTTT
226 | GTTTTTTGTTTTTTGTTTTTTTGAAGATATGGTTTTTTTAGTTTTAGTTG
227 | ATTTGTAAATTAGGGTGATTTTGAAAGTAGAAATTTGTTTGAGGTTAAAG
228 | GTGGTTTTTATAATTGTTTTAGTTTTATTTTAATTTTTTTTTAAAAAAAT
229 | GTGTGTGTGTATGTTTTTATGTATATATGTATATATAGAAGTAATATTAA
230 | TTTATTAATATTTTTTTTTTTTAAAATTTATGTTTTTTTTTTTTTTTTTT
231 | TTTTTTTTTTTTTTTTTTTTTTTTTGTTTTTTTTTTTTTTTTTTTTTTTT
232 | TTTTTTTTTTTTTTTTTTTATTAGTTTTTATTGTTTTTTTTGAGATATGG
233 | TTTTTTTAGTTTTAGTTGATTTGTAAGTTAGGGTGATTTTGAAAGTAGAA
234 | ATTTGTTTGAGGTTGAAGGTGGTTTTTATAATTGATTTAGTTTTATTTTA
235 | ATTTTTTTTTAAAAAAATGTGTGTGTGTATGTTTGTATGTATATATGTAT
236 | ATATAGAAGTAATATTAGGGGTTGGTGAGATGGTTTAGTGGGTAAGAGTA
237 | TTTGATTGTTTTTTTGAAGGTTTGGAGTTTAAATTTTAGTAATTATATGG
238 | TGGTTTATAATTATTTGTAATGAGATTTGATTTTTTTTTTTGGAGTGTTG
239 | GAAGATAGTTATAGTGTATTTATATATTAAAAAAAAAAAAGAAGTAATAT
240 | TAATTTATTAATATTTTTTTTTTTTAAAATTTATGTTTTTTTTTTTTTTT
241 | TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT
242 | TTTTTTTTTTTTTTTTTTATTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT
243 | TTTTATTAGTTTTTATTGTTTTTTTTGAGATATGGTTTTTTTAGTTTTAG
244 | TTGATTTGTAAGTTAGGGTGATTTTGAAAGTAGAAATTTGTTTGAGGTTG
245 | AAGGTGTGTTTTATAATTGTTTTAGTTTTATTTTAATTTTTTTTTAAAAA
246 | AATGTGTGTGTGTATGTTTTTATGTATATATGTATATATAGAAGTAATAT
247 | TAATTTATTAATATTTTTTTTTTTGAAATTTTATGTTTTTTTTTTTTTTT
248 | TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT
249 | TTTTTTTTTTTTATATTTATTTTTTTTATATATAGTTTTTTAGTGTAAGT
250 | AGTTTTGGTTGTTTTGAAGATATTTTGTAGGTTTTAATTTTGTAAGAGTT
251 | TTTTTTTGTTTTTTAAATGTTGGTATGAATGTTGTATTTTATTATGATTA
252 | GTTAAGATTTTTATTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTAT
253 | GATTTTAGTTATGGTTAGTTAGTGGTGGTGGTGGTGGTAGAGGGAGGTGG
254 | ATTATTGTAATTTTGTAGTTAGTTTAGTTTTTAGTTTGAGTTATTGGAAA
255 | GGAGTTTTAAGAAGATTGGTTATATTTTTTATTTATTATGTATTTTTTTA
256 | AGATTTATTTATTATTATATGTAAGTATATTGTAGTTGTTTTTAGATATA
257 | TTAGAAGAGGGAGTTAGATTTTGTTATGGATGGTTGTGAGTTATTATGTG
258 | GTTGTTGGGATTTGAATTTTGGATTTTTGGAAGAGTAGTTGGGTGTTTTT
259 | ATTTATTGAGTTATTTTATTAGTTTTTATTATGTATTTTAATTAAGATTT
260 | AATTATATTAAAAGAATTTAGATTGATTAATTTAGAGTTTGTTGTTTAAA
261 | AGTATAAGGAAAAAGTAGGAGAAAAATGTGAGGTTGTTTGTGGATGGTTG
262 | AGGTTGTTTTAGGGAGTTTTTTTATTATTTTGTATTTGTAAATTGGGTTA
263 | TTAAAATTTGGTGAAGGGAGAAATTAAAGTGATTTGAAATAATAGGTTAT
264 | ATGAAGGTTAGTTATTTTTATTTTGTTGTGTGGGAGTTTAGTTAGTAGAT
265 | AAGATGGTTGTTATGTATATGTTGTTTTTTAGTTTGGTGAGGTTAAAGTG
266 | TAATTGAGTGATAGAATAAGGAAGTAGATATGTAGATAATAGATATGTAG
267 | GTGAATTATTTGTTTTTTGTGTTTGGATAAAAGATATATAATAATTTTTA
268 | TTATTTATATTAAGTTTTAAAAAGTATTTTGATAGTTTTGTATATATTTA
269 | TATTTTATGTGATTAGAATTTTTTTTTTTGTTGTTTTTTTATTTATTTTT
270 | AGGAGTTGTATGGTGGTTTTTTTTAGGTTTTGTTGTTTTTTTTTGGTATG
271 | TAGGTATATATGTAGTAGATAAAGTATAAATATATATTTATATTGAAAAT
272 | TATTTGTAATAAGAAAGAAAGAAAGAAAGAAAGAAAGAAAGAAAGAAAGA
273 | AAGAAAGAAAGAAAGGGAGAAAGAAAGAAAGAAAGAAAGAAAGAAAGAAA
274 | GAAAGAAAGAAAGGAAGGAAGGAAGGATTTTTAGATATATGATTTTTTTA
275 | GTATTATTGATTATTGAATTTTGATTATGAAGGTATATTGGATTTTTGTT
276 | TTTTGTTTTTTTGTTTGTTTTGGTTTTTTGAGATAGGGTTTTTTTGTATA
277 | GTTTTGGTTGTTTTGGTATATTGGATTTTATGATAGAGTGTGTGTGTATG
278 | TGTGTGTGTGTGTGTGTGTGTGTGTGTGTGTGTGTTTGATATTTTTGTTG
279 | TGATTGGGGTAATTTGTAATTTAGTGGGTTTATGTTTTATTTTTGTAATT
280 | TTTTTTTTAATTTTTTTTTATTTTTATTTTTTATTTTATTTTATTTTATT
281 | TTATTTTATTTATTTTGTTTTTTTTTTTTTTAGATAGGGTTTTTTTTTAT
282 | AGTTTTGGTTGTTTTGGAATTTATTTTGTTGATTATGGTTATGGTGGTTT
283 | TGAATTTAGAAATTTTTTTATTTTTGTTTTTTTAGGATTGGGAATAAAGG
284 | TTTGAGTTATTATTTTTGGGTATATTTAATTTTTTTAATTTTTAAATTTT
285 | ATTTGTTTTATTTATTTTTTTTTTTTTTTAAGATGTGGTTTTTTTGTGTA
286 | ATTTTGGTTGTTTTGGAATTTATTTTGTAGATTAGGTTGGTTTTGAATTA
287 | TTAATTTGAATGTTTTTGTTTTTTAAATGTTGGGATTAGAGGTATGTGAT
288 | ATTATTGTTTGGATTAATTTTATTTGTTTGAAAATATTTTTTTTTTTTTT
289 | TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT
290 | TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT
291 | TTTTATTAGTTTTTTTTTTGTTTTGTTTTGTTTTTTTGGAGATATGGTTT
292 | TTTTAGTTTTAGTTGATTTGTAAGTTAGGGTGATTTTGAAAGTAGAAATT
293 | TGTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT
294 | TTTTTTTTTTTTTTTTTAAAAATGTTTAGGGATATTATTTTTTTTTTAGT
295 | TAGAGAAGAGTTTTAGGAAATGTATGTGAGTTTGTTTTGTTTTGTTTTGT
296 | GGGGTTAAATGTGATAGATATTTTTTTTGGTTTTGTGTGTTTTGTTAGTT
297 | AGTTTTTTTGTTTTGTTTATTTATTTATTTATTTATTTATTTATTTATTT
298 | ATTTATTTATTTATTAGTTTGTTTATTGTGGTTTTTATTTTTATTTATTT
299 | TTGTAGGGTTTTAAGATTGTTTTTTGGGATTTAAATGGGAGTTGTTTTGG
300 | ATTGATTGGTTGTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTGTTTTAG
301 | ATTTATTTATTATATGTAAGTATATTGTAGTAGTTGTAGGATATATTAGA
302 | TGAGGGTATTAGATTTTATTGTGGGTGGTTGTGAATTATTTATTATGTGG
303 | TTGTTGGGATTTGAATTTAGGATTTTTAGAAGAGTAGTTAGGGTTTTAAA
304 | TTGTTGAGTTATTTTTTTAGTTTTTTGTATTTTTTTTTAAGGTATGAATG
305 | ATTTTAGTATAGGAAGATAGTTTGTTTTTTTTTTTTTTTGAGTTATTTTT
306 | TTTTTTATTATATATTTAATAAAATTAGTAAATGAATGAAGTTTTTAGTT
307 | ATTTATTTTTTTGAGTTATTTAAATTTTTTTATAGTATTTTTTTTTTTTT
308 | TATATTGTTTTTTTTTTTTATGTTTGGGTGGGGTTGGGGGAGGGGTGGGG
309 | TGGGGGGTAGGGATTTGTATGTTTTTTTTGTAGGTTTGTGAATTATTTGT
310 | GATGGTTTGGTTTTTTGAATTGTTGAGTTTTGTTTATTTAGAGGTTGATT
311 | GGTTAGTTTTTTGTTTGAAGTTTTTGAGTGATGATTTTTTTGTGAATTTT
312 | TTGAATTTATTGTTTTTTTAGGTTTATATTTGTTTTGGTTTTGGTAATTG
313 | ATTGAATTAAATAATTAGGTTTATATTTAGAATTTTGGAAATGGTAATGG
314 | AGTTGATAATATATTTTAATAGAAAGAGGAATGTTTTATTAATTAGTATA
315 | TTTTTATTAGAAGTTTTATTTTGTTAGTAGTTTAGGAATTTGTAAAGTTA
316 | ATTTGGATAATATTTAAATGGTTTGGAATTTTTATTTTTATGTTTTTTTT
317 | TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTGAGATAGGGTTTTTTTGT
318 | ATAGTTTTGGTTGTTTTGGTATATTGGATTTTATAATAGATTTTGTGTGT
319 | GTGTGTGTGTGTGTGTGTGTGTGTGTGTGTGTGTGTGTAATATTTTTTTT
320 | GTGATTGTTGTAATTTGTAATTTAGTGGGTTTATGTTTGATTTTTGTAAT
321 | TTTTTTTTTTAATTTTTTTTTTTTTTTATATTTTATTTTATTTTATTTTA
322 | TTTTATTTTATTTTATTTTATTTTATTTTGGTTTTTGAGATAGGGTTTTT
323 | TTGTATAGTTTTGGTTGTTTTGGAATTTAGTTTGTAGATTAGGTTGGTTT
324 | AGAATTTAGAAATTTTTTTATTTTTGTTTTTTGAGTGTTGAGATTAAAGG
325 | TGTGTATTATTATATTTGGTTATTTTTAAATTTTTTTATTTTTAAATTTT
326 | ATTTTTATTTTTATTTATTTATTTATTTATTTTTGTTTTTTTTAGATATG
327 | GTTGGTTTTTTTGTATAATTTTGGTTGTTTTGGAATTTATTTTATAGATT
328 | AGGTTGGTTTTGATTTTAGAAATTTGTTTGTTTTTGTTTTTTAAGTGTTG
329 | GGATTAAAGGTGTGTTTTATGTTTGGTTTTTATTTTTAAATTTTATTTAT
330 | TTAATTTATTTTTGTTTATTATTGTGTAGATTAGGTTGGTTTTGAATATT
331 | TTAATTTGTTTGTTTTTGTTTTTTAAATGTTGGGATTAAAAGTATTTGTT
332 | ATTATTGTTTTGATTAATTTTTTTTTTTTTTTTTTTTTAGAAAATATTTT
333 | TTTTTTTATTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT
334 | TTTTTTTTATTATTTTTTTTTTTTTTTTGAGATATGGTTTTTTTGTGTAG
335 | TTTTAGTTGTTTTGTAATTTAAGGTGATTTTGAATGTAGAAATTTGTTTG
336 | AGGTTAAAGGTGTGTTTTATAATTGTTTTAGTTTTATTTTAATTTTTTTT
337 | TTAAAAATATGTGTTTTTGTATGTATGTATATATTGAAGTATTTATGTTT
338 | TTTTTGGTTTATAAAGTGAGTTTTAGGAGTATTTAGAGAAATTTTGTTTT
339 | TAAAAAAAAAAAAAAAAAAAAGAAAGAAAGAAAGAAAGAAAGAAAGAAAG
340 | AAAGAAGGAATTTTAATTATTATTATTATTATTATTAATAAAAAGGTTGT
341 | GGAAATTATTTTAGGTTTTTTTTTTTTATAGGTGAGGATGTAGTTGTTTG
342 | TAAATGAATATGTTGTGTGTGTGTGTGTGTGTGTGTGTGTGTGTGTGTGT
343 | GTGTGTGTGTGTATGTGTTTTTATGGTTAGTTAGTATTAATTTTAGATTT
344 | GTGTTTTAGAGGTTTTTATTTATTTATTTTTTATGTTTGAGTTTGTGTAG
345 | GTGGTAGGTTATTATATTTTTAGAAAAATAATATAAAATTAATTAATAAA
346 | TTAATTTGAAAATGTATAAGAATGGATTTATTTGGTATTGAAAAGTAATA
347 | GATTGTTGGGTAGTGGTGTAATATGTTTTTAGTTTTATTTATTATTTTGT
348 | AGGTAGAGGTAGATAAATTTTTGTGTTTTAAGTTAGTTTGGTTTATAGAG
349 | TAAGTTTTAGGATAGTGAGGGTAATATAGAAAAATATTGTTTTGATTTTA
350 | GTATTGGGAAGAGGTAGAGGTAGAATTTATTTGAGAGGTTGGTTTGGTTT
351 | GTTTTGTATGTTTTTGTATTATGTATAGAGATTTTGTTTTTTATAAATAA
352 | ATGAATATAGAGAAAGATATTTATTGATTTGAATATGTATGTGTGATGGT
353 | TTAGAGGGTAAAATTGTTGGTTGTTAAGGTATAGGTAAAATATTAAGGTT
354 | TAGATGGAATGTGAAGGTTTATTTTAGATTAGATAAGGTTTAGGTAATTT
355 | TTTATTTGGTTAGTTTGTTATTTTGTGTTGTTAATTATTATTATAAGGAT
356 | ATTTTTTTATAGTTTGTTTTTGTTATTATTGTTAGAATTGATTATATATT
357 | TTTGTTGGATGTGTTTTTGGAAATTAATTAGAATAGAAGTTTTTTTTGTT
358 | TTATAGTTATTTGTAATAGGTTTGGATTTAAATTGATTATTTAGTAGTAT
359 | TTTTTGTATAAATTTATGTATATATTTTTTTGGTATTTGTTTTTAGAAGT
360 | TGTTTTGGGGATGGATTTTTGTATTTTAATAAAAGAGAGATATTTGTATT
361 | ATTGATTTAGTGTAGAGATTATTTTGAATTAGATTTTTATTTTGAGTAGG
362 | GTGTGAGTGAGTAAAGTATAAGTTTTTGAGGTTTTTTTGGGAATTGATAT
363 | TTTATTTGGAAGAAAGAGATTTGTATATGTATAATTGATTTTTTGGTTTT
364 | TAAGTTAAGATATGGTAAGTATTTTTGTTATAGTAGAGTATTTTAATTAA
365 | TGGGAGTAGGATAAGTATATAATAAGGATATGTTTTTAAGGAATTTTTTT
366 | ATTTTTAATTTAGATTGGTGGAATAATTTGGTATAGATGTTTGTGTATTA
367 | AAAATTTTGTAGGATTTTTATTTTAGGTTATTGTTTAGTATTGGAATTTG
368 | AATTGTGGTTTTGAGTGATAGGTTTTGGGATATATGTAGTTTTGTATAGA
369 | TAGATAGATAGATAGATAGATAGATAGATAGATAGATGTATAAATAAATA
370 | TGTGAGTGTGTGTAATATATATATAAATATTATTTTTGGTTATAATTATT
371 | GAGGATGTGATTTTATTATTTTGTGTTTGTGAGTTTGTTTGTTTGTTTGT
372 | TTGTTTGTTTGTTTATTAAATTAAAAGAAATTAAATAATTATGGTTGTTT
373 | GTTTGTTTGTTTGTTTATATAGAGAAATGATTTTTTTAATTAATTAAAAT
374 | GATTTTTTAAGTTTGTTTTTTTTTTTTTTTTTTATTTTTTTTTTTTTTTT
375 | TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT
376 | TTTATTTTTTTTTTTTTTTTTTTATATTTATTTTTTTTATATATAGTTTT
377 | TTAGTGTAAGTATTTTTGATTGTTTTGAAGATATTTTGTAGGTTTTAATT
378 | TTGTAAGAGTTTTTTTTTGTTTTTTAAATGTTGGTATGAATGTTGTATTT
379 | TATTATGATTAGTTAAGATTTTTATTTTTTTTTTTTTTTTTTTTTTTTTT
380 | TTTTTTTTTATGATTTTAGTTATGGTTAGTTAGTGGTGGTGGTGGTGGTA
381 | GAGGGAGGTGGATTATTGTAATTTTGTAGTTAGTTTAGTTTTTAGTTTGA
382 | GTTATTGGAAAGGAGTTTTAAGAAGATTGGTTATATTTTTTATTTATTAT
383 | GTATTTTAATTAAAATTTAATTTTATTAAAAGAATTTAGATTGATTAATT
384 | TAGAGTTTGTTGTTTAAAAGTATAAGGAAAAAGTAGGAGAAAAATGTGAG
385 | GTTGTTTGTGGATGGTTGAGGTTGTTTTAGGGAGTTTTGTTATTATTTTG
386 | TATTTGTAAATTGGGTTATTAGAATTTGGTGAAGGGAGAAATTAAAGTGA
387 | TTTGAAATAATAGGTTATATGAAGGTTAGTTATTTTTATTTTGTTGTGTA
388 | GGAGTTTAGTTAGTAGATAAGATGGTTGTTATTTATATGTTATTTTTTAT
389 | TTTGGTGAGGTTAATGAGTAGTTGAGTTATAGGATAAGGAAGTAGATATG
390 | TAGATAATAGATATGTAGGTGAATTATTTTTTTTTTGTGTTTGGATAAAA
391 | GATATATAATAATTTTTATTATTTATAGTAAGTTTTAAAAAGTATTTTGA
392 | TAGTTATTTAGATATTTATTTTTTATATGATTAGAATTTTTTTTTTTTTT
393 | TTTTTAAATTAATTTGAGGTTTTGGTGTTTTTTTTTGGTATGTAGGTATA
394 | TAGGTAGTAGATAAAGTTTAAATATATATTTAGATTGAAAATTAATTTTA
395 | ATAAGAAAGAAAGAAAGAAAGAAAGAAAGAAAGAAAGAAAGAAAGAAAGG
396 | AAGGAAGGAAGGAAGAAAGAAAGGAATGAAAGATTTTTAGATATATGATT
397 | TTTTTAGTTTTATTGATTGTTGAATTTTGATTATGAAGGTATATTGGATT
398 | TTTGTTTTTTGGTTTTTTTTTTTTTTTTGTTTGTTTGTTTTGGTTTTTTG
399 | AGATAGGGTTTTTTTGTATAGTTTTGGATAAAAGATATATAATAATTTTT
400 | ATTATTTATATTAAGTTTTAAAAAGTATTTTGATAGTTTTGTATATATTT
401 | ATATTTTATGTGATTAGAATTTTTTTTTTTTGTTGTTTTTTTATTTATTT
402 | TTAGGAGTTGTATGGTGGTTTTTTTTAGGTTTTGTTGTTTTTTTTTGGTA
403 | AGTAGGTTTATAGGTAGTAGATAGAGTATAAATATATATTTATATTGAAA
404 | ATTAATTGTAATAAGAAAGAAAGAAAGAAAGAAAGAAAGAAAGAAAGAAA
405 | GAAAGAAGAGAGAAAGAGAGAAAGAAATAAAGATTTTAGGTTTGATTTGG
406 | TTGTGTGGGTGGTAGAAGAAGTGAGGTAGGTAGGTAGGTAGGTAGGTAGG
407 | TAGGTAGGTAGGTAGGTAGGTAGAGAGGATTTTTTTGAGTTTGAGGTTAT
408 | TAAAGTTTATAAAGTAAGTTTTAGGTAGGGATGTTAGGGATATATTGAGA
409 | GAAATTTTATTTTGGGGTAAAAGAAAATAAAAGTAGAAAAGGTTTTGGTT
410 | TTTATTTTTAGATATATGATTTTTTTAGTATTATTGATTATTGAAATTTG
411 | ATTATGAAGGTATATTGGATTTTATGATAGAGTTTGTGTGTGTGTGTGTG
412 | TATAATATTTTTGTTATGATTGTAGTTATTTGTTATTTTGTGGGTTTATG
413 | TTTGATTTTTGTAGTTTTTTAAAATTTTTTAAAATTTTTATTTTATATAT
414 | TTTTTAGTTTAGTTTAGTTTAATTTAGTTTAGTTTTTTAAGATAGGGTTT
415 | TTTTGTATAGTTTTGATTGTTTTGGAATTTATTTTGTAGATTAGGTTGGT
416 | TTTAAATTTAGAAATTTTATTATTTTTGTTTGAAGAGAGTTGGGATTAAA
417 | GATATGTGTTATTATTTTTGGTTATTTTTAAATTTTTAAATTATATTTAT
418 | TTAATTTATTTTTGTTTTTTTTAAGATGTGGTTTTTTTGTGTAATTTTGG
419 | TTGATTTGGAATTTATTGTGTAGATTAGGTTGGTTTTGAATATATTAATT
420 | TGTTTGTTTTTGTTTTTTTAATGTTGTGATTAAAGGTATGTGTTATTATT
421 | GTTTGGATTGATTTTTTTTTTTTTTTTTTTTTGGAAAATATTTTTTTTTT
422 | TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTATT
423 | TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTAAAATTTGTTTGAAAA
424 | TATTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT
425 | TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT
426 | TTTTTTTTTTTTTTTTTTTTATTAGTTTTTTTTTTGTTTTGTTTTGTTTT
427 | TTTGGAGATATGGTTTTTTTAGTTTTAGTTGATTTGTAAGTTAGGGTGAT
428 | TTTGAAAGTAGAAATTTGTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT
429 | TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTAAAAATGTTTAGG
430 | GATATTATTTTTTTTTTAGTTAGAGAAGAGTTTTAGGAAATGTATGTGAG
431 | TTTGTTTTGTTTTGTTTTGTGGGGTTAAATGTGATAGATATTTTTTTTGG
432 | TTTTGTGTGTTTTGTTAGTTAGTTTTTTTGTTTTGTTTATTTATTTATTT
433 | ATTTATTTATTTATTTATTTATTTATTTATTTATTAGTTTGTTTATTGTG
434 | GTTTTTATTTTTATTTATTTTTGTAGGGTTTTAAGATTGTTTTTTGGGAT
435 | TTAAATGGGAGTTGTTTTGGATTGATTGGTTGTTTTTTTTTTTTTTTTTT
436 | TTTTTTTTTTTTTGTTTTAGATTTATTTATTATATGTAAGTATATTGTAG
437 | TAGTTGTAGGATATATTAGATGAGGGTATTAGATTTTATTGTGGGTGGTT
438 | GTGAATTATTTATTATGTGGTTGTTGGGATTTGAATTTAGGATTTTTAGA
439 | AGAGTAGTTAGGGTTTTAAATTGTTGAGTTATTTTTTTAGTTTTTTGTAT
440 | TTTTTTTTAAGGTATGAATGATTTTAGTATAGGAAGATAGTTTGTTTTTT
441 | TTTTTTTTTGAGTTATTTTTTTTTTTATTATATATTTAATAAAATTAGTA
442 | AATGAATGAAGTTTTTAGTTATTTATTTTTTTGAGTTATTTAAATTTTTT
443 | TATAGTATTTTTTTTTTTTTTATATTGTTTTTTTTTTTTATGTTTGGGTG
444 | GGGTTGGGGGAGGGGTGGGGTGGGGGGTAGGGATTTGTATGTTTTTTTTG
445 | TAGGTTTGTGAATTATTTGTGATGGTTTGGTTTTTTGAATTGTTGAGTTT
446 | TGTTTATTTAGAGGTTGATTGGTTAGTTTTTTGTTTGAAGTTTTTGAGTG
447 | ATGATTTTTTTGTGAATTTTTTGAATTTATTGTTTTTTAGGTTATATTTG
448 | TTTTGGTTTTGGTAATTGATTGATTAAATAATTAGGTTTATATTTAGGAT
449 | TTTGGAAATGGTAATGGAGTTGATAATATATTTTAATAGAAAGAGGAATG
450 | TTTTATTAATTAGTATATTTTTATTAGAAGTTTTATTTTGTTAGTAGTTT
451 | AGGAATTTGTAAAGTTAATTTGGATAATATTTAAATGGTTTGGAATTTTT
452 | ATTTTTATGTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTG
453 | AGATAGGGTTTTTTTGTATAGTTTTGGTTGTTTTGGTATATTGGATTTTA
454 | TAATAGATTTTGTGTGTGTGTGTGTGTGTGTGTGTGTGTGTGTGTGTGTG
455 | TGTGTAATATTTTTTTTGTGATTGTTGTAATTTGTAATTTAGTGGGTTTA
456 | TGTTTGATTTTTGTAATTTTTTTTTTTAATTTTTTTTTTTTTTTATATTT
457 | TATTTTATTTTATTTTATTTTATTTTATTTTATTTTATTTTATTTTGGTT
458 | TTTGAGATAGGGTTTTTTTGTATAGTTTTGGTTGTTTTGGAATTTAGTTT
459 | GTAGATTAGGTTGGTTTAGAATTTAGAAATTTTTTTATTTTTGTTTTTTG
460 | AGTGTTGAGATTAAAGGTGTGTATTATTATATTTGGTTATTTTTAAATTT
461 | TTTTATTTTTAAATTTTATTTTTATTTTTATTTATTTATTTATTTATTTT
462 | TGTTTTTTTTAGATATGGTTGGTTTTTTTGTATAATTTTGGTTGTTTTGG
463 | AATTTATTTTATAGATTAGGTTGGTTTTGATTTTAGAAATTTGTTTGTTT
464 | TTGTTTTTTAAGTGTTGGGATTAAAGGTGTGTTTTATGTTTGGTTTTTAT
465 | TTTTAAATTTTATTTATTTAATTTATTTTTGTTTATTATTGTGTAGATTA
466 | GGTTGGTTTTGAATATTTTAATTTGTTTGTTTTTGTTTTTTAAATGTTGG
467 | GATTAAAAGTATTTGTTATTATTGTTTTGATTAATTTTTTTTTTTTTTTT
468 | TTTTTAGAAAATATTTTTTTTTTTATTTTTTTTTTTTTTTTTTTTTTTTT
469 | TTTTTTTTTTTTTTTTTTTTTTTTTATTATTTTTTTTTTTTTTTTGAGAT
470 | ATGGTTTTTTTGTGTAGTTTTAGTTGTTTTGTAATTTAAGGTGATTTTGA
471 | ATGTAGAAATTTGTTTGAGGTTAAAGGTGTGTTTTATAATTGTTTTAGTT
472 | TTATTTTAATTTTTTTTTTAAAAATATGTGTTTTTGTATGTATGTATATA
473 | TTGAAGTATTTATGTTATTTTTGGTTTATAAAGTGAGTTTTAGGAGTATT
474 | TAGAGAAATTTTGTTTTTAAAAAAAAAAAAAAAAAAAAGAAAGAAAGAAA
475 | GAAAGAAAGAAAGAAAGAAAGAAGGAATTTTAATTATTATTATTATTATT
476 | ATTAATAAAAAGGTTGTGGAAATTATTTTAGGTTTTTTTTTTTTATAGGT
477 | GAGGATGTAGTTGTTTGTAAATGAATATGTTGTGTGTGTGTGTGTGTGTG
478 | TGTGTGTGTGTGTGTGTGTGTGTGTGTGTATGTGTTTTTATGGTTAGTTA
479 | GTATTAATTTTAGATTTGTGTTTTAGAGGTTTTTATTTATTTATTTTTTA
480 | TGTTTGAGTTTGTGTAGGTGGTAGGTTATTATATTTTTAGAAAAATAATA
481 | TAAAATTAATTAATAAATTAATTTGAAAATGTATAAGAATGGATTTATTT
482 | GGTATTGAAAAGTAATAGATTGTTGGGTAGTGGTGTAATATGTTTTTAGT
483 | TTTATTTATTATTTTGTAGGTAGAGGTAGATAAATTTTTGTGTTTTAAGT
484 | TAGTTTGGTTTATAGAGTAAGTTTTAGGATAGTGAGGGTAATATAGAAAA
485 | ATATTGTTTTGATTTTAGTATTGGGAAGAGGTAGAGGTAGAATTTATTTG
486 | AGAGGTTGGTTTGGTTTGTTTTGTATGTTTTTGTATTATGTATAGAGATT
487 | TTGTTTTTTATAAATAAATGAATATAGAGAAAGATATTTATTGATTTGAA
488 | TATGTATGTGTGATGGTTTAGAGGGTAAAATTGTTGGTTGTTAAGGTATA
489 | GGTAAAATATTAAGGTTTAGATGGAATGTGAAGGTTTATTTTAGATTAGA
490 | TAAGGTTTAGGTAATTTTTTATTTGGTTAGTTTGTTATTTTGTGTTGTTA
491 | ATTATTATTATAAGGATATTTTTTTATAGTTTGTTTTTGTTATTATTGTT
492 | AGAATTGATTATATATTTTTGTTGGATGTGTTTTTGGAAATTAATTAGAA
493 | TAGAAGTTTTTTTTGTTTTATAGTTATTTGTAATAGGTTTGGATTTAAAT
494 | TGATTATTTAGTAGTATTTTTTGTATAAATTTATGTATATATTTTTTTGG
495 | TATTTGTTTTTAGAAGTTGTTTTGGGGATGGATTTTTGTATTTTAATAAA
496 | AGAGAGATATTTGTATTATTGATTTAGTGTAGAGATTATTTTGAATTAGA
497 | TTTTTATTTTGAGTAGGGTGTGAGTGAGTAAAGTATAAGTTTTTGAGGTT
498 | TTTTTGGGAATTGATATTTTATTTGGAAGAAAGAGATTTGTATATGTATA
499 | ATTGATTTTTTGGTTTTTAAGTTAAGATATGGTAAGTATTTTTGTTATAG
500 | TAGAGTATTTTAATTAATGGGAGTAGGATAAGTATATAATAAGGATATGT
501 | TTTTAAGGAATTTTTTTATTTTTAATTTAGATTGGTGGAATAATTTGGTA
502 | TAGATGTTTGTGTATTAAAAATTTTGTAGGATTTTTATTTTAGGTTATTG
503 | TTTAGTATTGGAATTTGAATTGTGGTTTTGAGTGATAGGTTTTGGGATAT
504 | ATGTAGTTTTGTATAGATAGATAGATAGATAGATAGATAGATAGATAGAT
505 | AGATGTATAAATAAATATGTGAGTGTGTGTAATATATATATAAATATTAT
506 | TTTTGGTTATAATTATTGAGGATGTGATTTTATTATTTTGTGTTTGTGAG
507 | TTTGTTTGTTTGTTTGTTTGTTTGTTTGTTTATTAAATTAAAAGAAATTA
508 | AATAATTATGGTTGTTTGTTTGTTTGTTTGTTTATATAGAGAAATGATTT
509 | TTTTAATTAATTAAAATGATTTTTTAAGTTTGTTTTTTTTTTTTTTTTTT
510 | ATTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT
511 | TTTTTTTTTTTTTTTTTTTTATTTTTTTTTTTTTTTTTTTATATTTATTT
512 | TTTTTATATATAGTTTTTTAGTGTAAGTATTTTTGATTGTTTTGAAGATA
513 | TTTTGTAGGTTTTAATTTTGTAAGAGTTTTTTTTTGTTTTTTAAATGTTG
514 | GTATGAATGTTGTATTTTATTATGATTAGTTAAGATTTTTATTTTTTTTT
515 | TTTTTTTTTTTTTTTTTTTTTTTTTTATGATTTTAGTTATGGTTAGTTAG
516 | TGGTGGTGGTGGTGGTAGAGGGAGGTGGATTATTGTAATTTTGTAGTTAG
517 | TTTAGTTTTTAGTTTGAGTTATTGGAAAGGAGTTTTAAGAAGATTGGTTA
518 | TATTTTTTATTTATTATGTATTTTAATTAAAATTTAATTTTATTAAAAGA
519 | ATTTAGATTGATTAATTTAGAGTTTGTTGTTTAAAAGTATAAGGAAAAAG
520 | TAGGAGAAAAATGTGAGGTTGTTTGTGGATGGTTGAGGTTGTTTTAGGGA
521 | GTTTTGTTATTATTTTGTATTTGTAAATTGGGTTATTAGAATTTGGTGAA
522 | GGGAGAAATTAAAGTGATTTGAAATAATAGGTTATATGAAGGTTAGTTAT
523 | TTTTATTTTGTTGTGTAGGAGTTTAGTTAGTAGATAAGATGGTTGTTATT
524 | TATATGTTATTTTTTATTTTGGTGAGGTTAATGTGTAGTTGAGTGATAGG
525 | ATAAGGAAGTAGATATGTAGATAATAGATATGTAGGTGAATTATTTTTTT
526 | TTTGTGTTTGGATAAAAGATATATAATAATTTTTATTATTTATAGTAAGT
527 | TTTAAAAAGTATTTTGATAGTTATTTAGATATTTATTTTTTATATGATTA
528 | GAATTTTTTTTTTTTTTTTTTTAAATTAATTTGAGGTTTTGGTGTTTTTT
529 | TTTGGTATGTAGGTATATAGGTAGTAGATAAAGTTTAAATATATATTTAG
530 | ATTGAAAATTAATTTTAATAAGAAAGAAAGAAAGAAAGAAAGAAAGAAAG
531 | AAAGAAAGAAAGAAAGAAAGGAAGGAAGGAAGGAAGAAAGAAAGGAATGA
532 | AAGATTTTTAGATATATGATTTTTTTAGTTTTATTGATTGTTGAATTTTG
533 | ATTATGAAGGTATATTGGATTTTTGTTTTTTGGTTTTTTTTTTTTTTTTG
534 | TTTGTTTGTTTTGGTTTTTTGAGATAGGGTTTTTTTGTATAGTTTTGGTT
535 | GTTTTGGTATATTGGATTTTATAAAAGAGTTTGTGTGTGTGTGTGTGTGT
536 | GTGTGTGTGTGTGTAATATTTTTGTGATTGTGGTAATTTGTAATTTAGTG
537 | GGTTTATGTTTGATTTTTGTAATATTTTTTTTTAATTTTTTTTTTTTTTT
538 | ATATTTTATTTTATTTTATTTTATTTTATTTTATTTTATTTTATTTTATT
539 | TTATTTTATTTTGAGATAGGGTTTTTTTGTATAGTTTTGGTTGTTTTGGA
540 | ATTTATTTTGTAGATTAGGTTGGTTATAAATTTAGAAATTTTTTTATTTT
541 | TGTTTTTTTAGGGTTGGGATTAAAGGTTTGAGTTATTATTTTTTGGTATT
542 | TTTTAATTTTTTAATTGTATTTATTAAATTTATTTTTGTTTGTTTTTTTT
543 | TTATGATGTAGTTTTTTTGTGTAATATTGGTTGTTTTGGAATTTATTTTG
544 | TAGGTTAGGTTGGTTTTGAATTTTAATTTGTTTGTTTTTGTTTTTTAAGT
545 | GTTGGGATTAAATGTATGTGTTATTATTGTTTGGATTAATTTTATTTGTT
546 | TGAAAATATTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT
547 | TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTATT
548 | TTTTTGTTTTTTTATTTTTTTTTTTTGTTTTTTTTTGAGATATGGTTTTT
549 | TTAGTTTTAGTTGATTTGTAAATTAGGGTGATTTTGAATGTAGAAATTTG
550 | TTTGAGGTTAAAGGTGTGTTTTATAATTGTTTTAGTTTTATTTTAATTTT
551 | TTTTAAAAAAATGTGTGTGTGTGTATGTATGTATATATGTATATATAGTA
552 | GTAATATTAATTTATTAATATTTTTTTTTTTAAAAATTATTTTTTTTTTT
553 | TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTATATTTATTTTTT
554 | TTATATATAGTTTTTTAGTGTAAGTAGTTTTGGTTGTTTTGAAGATATTT
555 | TGTAGGTTTTAATTTTGTAAGAGTTTTTTTTTGTTTTTTAAATGTTGGTA
556 | TAAATGTTGTATTTTATTATGATTGGTTGAGATTTTTATTTTTTTTTTTT
557 | TTTTTTTTTTTTTTATTTTTTTTTTAAAGATTTATTTATTTATTATATGT
558 | AAGTATATTGTAGTTGTTTTTAGATATATTAGAAGAGGATATTAGATTTT
559 | ATTATGGGTGGTTGTGAGTTATTGTGTGGTTGTTGGGATTTGAATTTTGG
560 | ATTTTTGGAAGAGTAGTTGGGTGTTTTTATTTATTGAGTTATTTTATTAG
561 | TTTTTTTTTTTTTTTTTATGATTTTAGTTTTGGTTAGGTAGTGGTGGTGG
562 | TGGTGGTGGTGGTGTTGGTGGTGGTAGAGGGAGGTGGATTATTGTAATTT
563 | TGTAGTTAGTTTAGTTTTTAGTTTGAGTTATTTGAAAGGAGTTTTAGGAA
564 | GATTGGTTATATTTTTTATTTATTATGTATTTTAATTAAGATTTAATTAT
565 | ATTAAAAGAATTTAGATTGATTAATTTAGAGTTTGTTGTTTAAAAGTATA
566 | AGGAAAAAGTAGGAGAAAAATGTGAGGTTGTTTGTGGATGGTTGAGGTTG
567 | TTTTAGGGAGTTTTGTTATTATTTTGTATTTGTAAATTGGGTTATTAGAA
568 | TTTGGTGAAGGGAGAAATTAAAGTGATTTGAAATAATAGGTTATATGAAG
569 | GTTAGTTATTTTTATTTTGTTGTGTGGGAGTTTAGTTAGTAGATAAGATG
570 | GTTGTTATGTATATGTTGTTTTTTAGTTTGGTGAGGTTAAAGTATAATTG
571 | AGTGATAGAATAAGGAAGTAGATATGTAGATAATAGATATGTAGGTGAGT
572 | TATTTTTTTTTTGTGTTTGGATAAAAGATATATAATAATTTTTATTATTT
573 | ATATTAAGTTTTAAAAAGTATTTTGATAGTTTTGTATATATTTATATTTT
574 | ATGTGATTAGAATTTTTTTTTTTTGTTGTTTTTTTATTTATTTTTAGGAG
575 | TTGTATGGTGGTTTTTTTTAGGTTTTGTTGTTTTTTTTTGGTAAGTAGGT
576 | TTATAGGTAGTAGATAGAGTATAAATATATATTTATATTGAAAATTAATT
577 | GTAATAAGAAAGAAAGAAAGAAAGAAAGAAAGAAAGAAAGAAAGAAAGAA
578 | AGAAAGAAGAGAGAAAGAGAGAAAGAAATAAAGATTTTAGGTTTGATTTG
579 | GTTGTGTGGGTGGTAGAAGAAGTGAGGTAGGTAGGTAGGTAGGTAGGTAG
580 | GTAGGTAGGTAGGTAGGTAGGTAGAGAGGATTTTTTTGAGTTTGAGGTTA
581 | TTAAAGTTTATAAAGTAAGTTTTAGGTAGGGATGTTAGGGATATATTGAG
582 | AGAAATTTTATTTTGGGGTAAAAGAAAATAAAAGTAGAAAAGGTTTTGGT
583 | TTTTATTTTTAGATATATGATTTTTTTAGTATTATTGATTATTGAAATTT
584 | GATTATGAAGGTATATTGGATTTTATGATAGAGTTTGTGTGTGTGTGTGT
585 | GTATAATATTTTTGTTATGATTGTAGTTATTTGTTATTTTGTGGGTTTAT
586 | GTTTGATTTTTGTAGTTTTTTAAAATTTTTTAAAATTTTTATTTTATATA
587 | TTTTTTAGTTTAGTTTAGTTTAATTTAGTTTAGTTTTTTAAGATAGGGTT
588 | TTTTTGTATAGTTTTGATTGTTTTGGAATTTATTTTGTAGATTAGGTTGG
589 | TTTTAAATTTAGAAATTTTTTTATTTTTGTTTGAAGAGAGTTGGGATTAA
590 | AGATATGTGTTATTATTTTTGGTTATTTTTAAATTTTTAAATTATATTTA
591 | TTTAATTTATTTTTGTTTTTTTTAAGATGTGGTTTTTTTGTGTAATTTTG
592 | GTTGATTTGGAATTTATTGTGTTTATTAGGTTGGTTTTGAATATATTAAT
593 | TTGTTTGTTTTTGTTTTTTTAATGTTGTGATTAAAGGTATGTGTTATTAT
594 | TGTTTGGATTGATTTTTTTTTTTTTTTTTTTTTGGAAAATATTTTTTTTT
595 | TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTAT
596 | TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTAAAATTTGTTTAAGG
597 | TTAAAGGTGTGTTTTATAATTGTTTTAGTTTTGTTTTAATTTTTTTTAAA
598 | AAAAAATAAATAAAAAAAAAATTAAAATAGTATGTATGTATGTATATTTA
599 | GAAGAAATATTAATTTATTAATAATTTTTTTTTTTTAAAATTTATGTTAT
600 | TTTTGTTTTATAAAGTGAGTTTTAGGATTTATTAGAGAAATTTTGTGTTT
601 | AAATTTTTGTGTTTAAGGTTATTTTGGTTTATAAAGTGAGTTTTAAGTTT
602 | GATAGGGTTATATAGAAAAATTATATTTTAGAAAAAAAAAAAGTTTTAAA
603 | TATATATATATATATATATATATATATATATATATATATATATATATATA
604 | TATAGGTGTGTGTGTGGTGATGAGGGGAAGTTGTGTTTAAAATAAATATT
605 | TTTTTGGTTAAAGTGAAAGTAAATTATTATGAAGAGGTATTTTTAGAAAA
606 | AATAAATATAAATGGGTTTTTTAATTATTTTAGTATTGTTTTAATTTAAT
607 | TTTGAATTTAGTTTTGGAAAAGGGGGTGGGTGTGGGTGAGTGAGGGTGAG
608 | TGAGTAGATGGGTGGGTGGGTGGGTGAGTGGTTGGTGGGTGGTGGTAGTG
609 | AGTATTAGAAAATAATAAATTTTAAGTGGTAGAGTGTTTTAAAAATGAGA
610 | TTTAAATGTGGTGGAATGGAGGTTGTTGTTATTTTTTTTTTTTATTGTTT
611 | AGATGTTTTTTTTTTTTTATTGTGTTTTTTTTTTTTAATTGTGTTTAATT
612 | GTGTTTGTTTTTTTATTTTGTTGATTTGTTAGTGATGTATTTTGATTTTA
613 | AGAATGATTTTGTTTGTTTTTATTGTTTTTTGTTATATTTTTGTTTTTGG
614 | GTGTTTGAGTTTAGTTTGTGTTTGTTATGTTTGGGTGGGATGATGGGGAT
615 | TGTTTGTGTTATTTGGGAGAAGTGGTGGGTGGGTATGTTGTTTTGTTGTG
616 | TGTGTGTGAGTGTTGGAATTTGAGTTTGGGAGATTTTTTGGAGAGATAGA
617 | ATGAGTGAGTGAATGTGGTGGTGTGTGAGTGATTTGTATTGGTTTGTATG
618 | GTTGATTGAGATTATTGTTGGGTGATATTTAGTGGTGATAAGTTTTGGGA
619 | ATGTTTTAGGTTTTTTAGGTTGGTGATATAGGAGAGGGAAGTGTTTGTGG
620 | TGAGGTGATTAGGGTGATAGGAGGTTGGGTAAGTAGGTGGGAGTGTTTTG
621 | GAGATGGTGTTGTGTTTAAGGATGGTTTTTAATAAGGAGGTTGTATAGGG
622 | AGATGGTTAAAGTAGATTGAGTTGTTGTATGTTTTTTTGGGAAAAATGTT
623 | AGGGTTGGTGGTAATGTTATTAGGTTGAT


--------------------------------------------------------------------------------
/Dataset/DP-MFSC_Dataset/promoters.txt:
--------------------------------------------------------------------------------
  1 | tactagcaatacgcttgcgttcggtggttaagtatgtataatgcgcgggcttgtcgt
  2 | tgctatcctgacagttgtcacgctgattggtgtcgttacaatctaacgcatcgccaa
  3 | gtactagagaactagtgcattagcttatttttttgttatcatgctaaccacccggcg
  4 | aattgtgatgtgtatcgaagtgtgttgcggagtagatgttagaatactaacaaactc
  5 | tcgataattaactattgacgaaaagctgaaaaccactagaatgcgcctccgtggtag
  6 | aggggcaaggaggatggaaagaggttgccgtataaagaaactagagtccgtttaggt
  7 | cagggggtggaggatttaagccatctcctgatgacgcatagtcagcccatcatgaat
  8 | tttctacaaaacacttgatactgtatgagcatacagtataattgcttcaacagaaca
  9 | cgacttaatatactgcgacaggacgtccgttctgtgtaaatcgcaatgaaatggttt
 10 | ttttaaatttcctcttgtcaggccggaataactccctataatgcgccaccactgaca
 11 | gcaaaaataaatgcttgactctgtagcgggaaggcgtattatgcacaccccgcgccg
 12 | cctgaaattcagggttgactctgaaagaggaaagcgtaatatacgccacctcgcgac
 13 | gatcaaaaaaatacttgtgcaaaaaattgggatccctataatgcgcctccgttgaga
 14 | ctgcaatttttctattgcggcctgcggagaactccctataatgcgcctccatcgaca
 15 | tttatatttttcgcttgtcaggccggaataactccctataatgcgccaccactgaca
 16 | aagcaaagaaatgcttgactctgtagcgggaaggcgtattatgcacaccgccgcgcc
 17 | atgcatttttccgcttgtcttcctgagccgactccctataatgcgcctccatcgaca
 18 | aaacaatttcagaatagacaaaaactctgagtgtaataatgtagcctcgtgtcttgc
 19 | tctcaacgtaacactttacagcggcgcgtcatttgatatgatgcgccccgcttcccg
 20 | gcaaataatcaatgtggacttttctgccgtgattatagacacttttgttacgcgttt
 21 | gacaccatcgaatggcgcaaaacctttcgcggtatggcatgatagcgcccggaagag
 22 | aaaaacgtcatcgcttgcattagaaaggtttctggccgaccttataaccattaatta
 23 | tctgaaatgagctgttgacaattaatcatcgaactagttaactagtacgcaagttca
 24 | accggaagaaaaccgtgacattttaacacgtttgttacaaggtaaaggcgacgccgc
 25 | aaattaaaattttattgacttaggtcactaaatactttaaccaatataggcatagcg
 26 | ttgtcataatcgacttgtaaaccaaattgaaaagatttaggtttacaagtctacacc
 27 | catcctcgcaccagtcgacgacggtttacgctttacgtatagtggcgacaatttttt
 28 | tccagtataatttgttggcataattaagtacgacgagtaaaattacatacctgcccg
 29 | acagttatccactattcctgtggataaccatgtgtattagagttagaaaacacgagg
 30 | tgtgcagtttatggttccaaaatcgccttttgctgtatatactcacagcataactgt
 31 | ctgttgttcagtttttgagttgtgtataacccctcattctgatcccagcttatacgg
 32 | attacaaaaagtgctttctgaactgaacaaaaaagagtaaagttagtcgcgtagggt
 33 | atgcgcaacgcggggtgacaagggcgcgcaaaccctctatactgcgcgccgaagctg
 34 | taaaaaactaacagttgtcagcctgtcccgcttataagatcatacgccgttatacgt
 35 | atgcaattttttagttgcatgaactcgcatgtctccatagaatgcgcgctacttgat
 36 | ccttgaaaaagaggttgacgctgcaaggctctatacgcataatgcgccccgcaacgc
 37 | tcgttgtatatttcttgacaccttttcggcatcgccctaaaattcggcgtcctcata
 38 | ccgtttattttttctacccatatccttgaagcggtgttataatgccgcgccctcgat
 39 | ttcgcatatttttcttgcaaagttgggttgagctggctagattagccagccaatctt
 40 | tgtaaactaatgcctttacgtgggcggtgattttgtctacaatcttacccccacgta
 41 | gatcgcacgatctgtatacttatttgagtaaattaacccacgatcccagccattctt
 42 | aacgcatacggtattttaccttcccagtcaagaaaacttatcttattcccacttttc
 43 | ttagcggatcctacctgacgctttttatcgcaactctctactgtttctccatacccg
 44 | gccttctccaaaacgtgttttttgttgttaattcggtgtagacttgtaaacctaaat
 45 | cagaaacgttttattcgaacatcgatctcgtcttgtgttagaattctaacatacggt
 46 | cactaatttattccatgtcacacttttcgcatctttgttatgctatggttatttcat
 47 | atataaaaaagttcttgctttctaacgtgaaagtggtttaggttaaaagacatcagt
 48 | caaggtagaatgctttgccttgtcggcctgattaatggcacgatagtcgcatcggat
 49 | ggccaaaaaatatcttgtactatttacaaaacctatggtaactctttaggcattcct
 50 | taggcaccccaggctttacactttatgcttccggctcgtatgttgtgtggaattgtg
 51 | ccatcaaaaaaatattctcaacataaaaaactttgtgtaatacttgtaacgctacat
 52 | tggggacgtcgttactgatccgcacgtttatgatatgctatcgtactctttagcgag
 53 | tcagaaatattatggtgatgaactgtttttttatccagtataatttgttggcataat
 54 | atatgaacgttgagactgccgctgagttatcagctgtgaacgacattctggcgtcta
 55 | cgaacgagtcaatcagaccgctttgactctggtattactgtgaacattattcgtctc
 56 | caatggcctctaaacgggtcttgaggggttttttgctgaaaggaggaactatatgcg
 57 | ttgacctactacgccagcattttggcggtgtaagctaaccattccggttgactcaat
 58 | cgtctatcggtgaacctccggtatcaacgctggaaggtgacgctaacgcagatgcag
 59 | gccaatcaatcaagaacttgaagggtggtatcagccaacagcctgacatccttcgtt
 60 | tggatggacgttcaacattgaggaaggcataacgctactacctgatgtttactccaa
 61 | gaggtggctatgtgtatgaccgaacgagtcaatcagaccgctttgactctggtatta
 62 | cgtagcgcatcagtgctttcttactgtgagtacgcaccagcgccagaggacgacgac
 63 | cgaccgaagcgagcctcgtcctcaatggcctctaaacgggtcttgaggggttttttg
 64 | ctacggtgggtacaatatgctggatggagatgcgttcacttctggtctactgactcg
 65 | atagtctcagagtcttgacctactacgccagcattttggcggtgtaagctaaccatt
 66 | aactcaaggctgatacggcgagacttgcgagccttgtccttgcggtacacagcagcg
 67 | ttactgtgaacattattcgtctccgcgactacgatgagatgcctgagtgcttccgtt
 68 | tattctcaacaagattaaccgacagattcaatctcgtggatggacgttcaacattga
 69 | aacgagtcaatcagaccgctttgactctggtattactgtgaacattattcgtctccg
 70 | aagtgcttagcttcaaggtcacggatacgaccgaagcgagcctcgtcctcaatggcc
 71 | gaagaccacgcctcgccaccgagtagacccttagagagcatgtcagcctcgacaact
 72 | ttagagagcatgtcagcctcgacaacttgcataaatgctttcttgtagacgtgccct
 73 | tattcgtctccgcgactacgatgagatgcctgagtgcttccgttactggattgtcac
 74 | tgctgaaaggaggaactatatgcgctcatacgatatgaacgttgagactgccgctga
 75 | catgaactcaaggctgatacggcgagacttgcgagccttgtccttgcggtacacagc
 76 | ttcgtctccgcgactacgatgagatgcctgagtgcttccgttactggattgtcacca
 77 | catgtcagcctcgacaacttgcataaatgctttcttgtagacgtgccctacgcgctt
 78 | aggaggaactacgcaaggttggaacatcggagagatgccagccagcgcacctgcacg
 79 | tctcaacaagattaaccgacagattcaatctcgtggatggacgttcaacattgagga
 80 | tgaagtgcttagcttcaaggtcacggatacgaccgaagcgagcctcgtcctcaatgg
 81 | ctatatgcgctcatacgatatgaacgttgagactgccgctgagttatcagctgtgaa
 82 | gcggcagcacgtttccacgcggtgagagcctcaggattcatgtcgatgtcttccggt
 83 | atccctaatgtctacttccggtcaatccatctacgttaaccgaggtggctatgtgta
 84 | tggcgtctatcggtgaacctccggtatcaacgctggaaggtgacgctaacgcagatg
 85 | tctcgtggatggacgttcaacattgaggaaggcataacgctactacctgatgtttac
 86 | tattggcttgctcaagcatgaactcaaggctgatacggcgagacttgcgagccttgt
 87 | tagagggtgtactccaagaagaggaagatgaggctagacgtctctgcatggagtatg
 88 | cagcggcagcacgtttccacgcggtgagagcctcaggattcatgtcgatgtcttccg
 89 | ttacgttggcgaccgctaggactttcttgttgattttccatgcggtgttttgcgcaa
 90 | acgctaacgcagatgcagcgaacgctcggcgtattctcaacaagattaaccgacaga
 91 | ggtgttttgcgcaatgttaatcgctttgtacacctcaggcatgtaaacgtcttcgta
 92 | aaccattccggttgactcaatgagcatctcgatgcagcgtactcctacatgaataga
 93 | agacgtctctgcatggagtatgagatggactacggtgggtacaatatgctggatgga
 94 | tgttgattttccatgcggtgttttgcgcaatgttaatcgctttgtacacctcaggca
 95 | tgcacgggttgcgatagcctcagcgtattcaggtgcgagttcgatagtctcagagtc
 96 | aggcatgtaaacgtcttcgtagcgcatcagtgctttcttactgtgagtacgcaccag
 97 | ccgagtagacccttagagagcatgtcagcctcgacaacttgcataaatgctttcttg
 98 | cgctaggactttcttgttgattttccatgcggtgttttgcgcaatgttaatcgcttt
 99 | tatgaccgaacgagtcaatcagaccgctttgactctggtattactgtgaacattatt
100 | agagggtgtactccaagaagaggaagatgaggctagacgtctctgcatggagtatga
101 | gagagcatgtcagcctcgacaacttgcataaatgctttcttgtagacgtgccctacg
102 | cctcaatggcctctaaacgggtcttgaggggttttttgctgaaaggaggaactatat
103 | gtattctcaacaagattaaccgacagattcaatctcgtggatggacgttcaacattg
104 | cgcgactacgatgagatgcctgagtgcttccgttactggattgtcaccaaggcttcc
105 | ctcgtcctcaatggcctctaaacgggtcttgaggggttttttgctgaaaggaggaac
106 | taacattaataaataaggaggctctaatggcactcattagccaatcaatcaagaact
107 | 


--------------------------------------------------------------------------------
/main.py:
--------------------------------------------------------------------------------
 1 | import datetime
 2 | import math
 3 | 
 4 | from models.GroundTruth import groundTruth
 5 | from utils.Options import args_parser
 6 | from models.Handlers import flmdHandler
 7 | import models.ConsolidatedFrequency as CF
 8 | 
 9 | def GetF1score(result,truth):
10 |     tp = 0
11 |     for frag in result:
12 |         if frag in truth:
13 |             tp += 1
14 |     fp = len(result) - tp
15 |     precision = tp/len(result)
16 |     recall = tp/len(truth)
17 |     F1score = (2*precision*recall)/(precision+recall)
18 |     return F1score
19 | 
20 | def GetARE(result,truth):
21 |     ARE = 0.0
22 |     for key in truth:
23 |         if key in result:
24 |             ratio = abs(result[key] - truth[key])/ truth[key]
25 |             ARE += ratio
26 |         else:
27 |             ARE += 0
28 |     ARE = ARE / len(truth)
29 |     return ARE
30 | 
31 | 
32 | def GetPrecision(result,truth):
33 |     tp = 0
34 |     for frag in result:
35 |         if frag in truth:
36 |             tp += 1
37 |     precision = tp/len(result)
38 |     return precision
39 | 
40 | if __name__ == '__main__':
41 | 
42 |     args = args_parser()
43 | 
44 |     file = open("Dataset/DP-MFSC_Dataset/Promoters.txt")
45 |     lines = file.readlines()
46 |     dataset = []
47 |     for line in lines:
48 |         dataset.append(line.strip())
49 | 
50 |     # Implement the DP-FLMD Model
51 |     if args.mode == 'FLMD':
52 |         # Phase 1: Mining frequent sequence sets
53 |         begin = datetime.datetime.now()
54 |         handler = flmdHandler(args, dataset)
55 |         fragments = handler.run()
56 |         end = datetime.datetime.now()
57 |         print("DP-FLMD minning FPs running time:" + str(end - begin))
58 | 
59 |         # Phase 2: Mining top-k Consolidated frequency sequences
60 |         CF_Noise = CF.calculateConsolidatedFrequency(args, fragments)
61 |         end = datetime.datetime.now()
62 |         print("DP-FLMD All running time:" + str(end - begin))
63 | 
64 |         # Implement the groundtruth Model
65 |         # Phase 1: Mining frequent sequence sets
66 |         res = groundTruth(dataset, args)
67 |         # Phase 2: Mining top-k Consolidated frequency sequences
68 |         CF_True = CF.calculateConsolidatedFrequency(args, res)
69 | 
70 |         # Evaluate results
71 |         ARE = GetARE(CF_Noise, CF_True)
72 |         F1Score = GetF1score(CF_Noise, CF_True)
73 |         precision = GetPrecision(CF_Noise.keys(), CF_True.keys())
74 |         print("time:", str(end - begin),", precision: ", precision, ", ARE: ", ARE, ",  F1Score: ",F1Score)
75 | 
76 |     # Implement the groundtruth model
77 |     else:
78 |         begin = datetime.datetime.now()
79 |         # Phase 1: Mining frequent sequence sets
80 |         res = groundTruth(dataset, args)
81 |         print("res: ", res)
82 |         # Phase 2: Mining top-k Consolidated frequency sequences
83 |         CF_True = CF.calculateConsolidatedFrequency(args, res)
84 |         print("CF_True: ", CF_True)
85 |         end = datetime.datetime.now()
86 |         print("GroundTruth Total running time:" + str(end - begin))
87 | 


--------------------------------------------------------------------------------
/models/ConsolidatedFrequency.py:
--------------------------------------------------------------------------------
 1 | from collections import Counter
 2 | import Levenshtein
 3 | 
 4 | def TopN(dicta,dictb, top_K):
 5 |     dictMerged = dict(list(dicta.items()) + list(dictb.items()))
 6 |     d = sorted(dictMerged.items(),key=lambda t:t[1],reverse=True)[:top_K]
 7 |     return dict(d)
 8 | 
 9 | def calculateConsolidatedFrequency(args,FPs):
10 |     len_gram_sup = {}
11 |     # Step 1: put all l-motifs into different sets.
12 |     for p in FPs:
13 |         curLen = len(p)
14 |         if curLen >= args.minl and curLen <= args.maxl:
15 |             if curLen in len_gram_sup.keys():
16 |                 counter = len_gram_sup[curLen]
17 |                 counter[p] = FPs[p]
18 |                 len_gram_sup[curLen] = counter
19 |             else:
20 |                 counter = Counter()
21 |                 counter[p] = FPs[p]
22 |                 len_gram_sup[curLen] = counter
23 | 
24 |     N = {}
25 |     l = args.minl
26 |     len_motifs_consolidatesup = {}
27 | 
28 |     while l <= args.maxl:
29 |         if l in len_gram_sup:
30 |             seq_l = len_gram_sup[l]
31 |             s = list(seq_l.keys())[0]
32 |             Bucket = {}
33 |             for each_seq1 in seq_l:
34 |                 i = Levenshtein.hamming(each_seq1, s)
35 |                 if i not in Bucket.keys():
36 |                     Bucket.setdefault(i, [])
37 |                     Bucket[i].append(each_seq1)
38 |                 else:
39 |                     Bucket[i].append(each_seq1)
40 |             for i in Bucket.keys():
41 |                 for each_seq1 in Bucket[i]:
42 |                     len_motifs_consolidatesup.setdefault(l, {})[each_seq1] = 0
43 |                     if i >= args.delta:
44 |                         for j in range(int(i - args.delta), min(int(i + args.delta), l) + 1):
45 |                             if j in Bucket.keys():
46 |                                 for each_seq2 in Bucket[j]:
47 |                                     if 0 <= Levenshtein.hamming(each_seq1, each_seq2) <= args.delta:
48 |                                         len_motifs_consolidatesup.setdefault(l, {})[each_seq1] = round(
49 |                                             float(len_motifs_consolidatesup.setdefault(l, {})[each_seq1])) + round(
50 |                                             float(len_gram_sup[l][each_seq2]))
51 | 
52 |                     else:
53 |                         for j in range(0, min(int(i + args.delta), 1) + 1):
54 |                             if j in Bucket.keys():
55 |                                 for each_seq2 in Bucket[j]:
56 |                                     if 0 <= Levenshtein.hamming(each_seq1, each_seq2) <= args.delta:
57 |                                         len_motifs_consolidatesup.setdefault(l, {})[each_seq1] = round(
58 |                                             float(len_motifs_consolidatesup.setdefault(l, {})[each_seq1])) + round(
59 |                                             float(len_gram_sup[l][each_seq2]))
60 | 
61 |             N = TopN(N, len_motifs_consolidatesup[l],args.topN)
62 |         l += 1
63 |     return N


--------------------------------------------------------------------------------
/models/Dataset.py:
--------------------------------------------------------------------------------
 1 | import itertools
 2 | 
 3 | 
 4 | class SeqDataSet():
 5 |     def __init__(self, points):
 6 |         # self.alphabet =  ["A", "G", "C", "T"]
 7 |         self.alphabet = ["a", "g", "c", "t"]
 8 |         self.points =  self.alphabet
 9 |         self.record = []
10 | 
11 |     def add_line(self, line):
12 |         self.record.append(line)
13 | 
14 |     def get_line(self, index):
15 |         return self.record[index]
16 | 
17 |     def get_line_num(self):
18 |         return len(self.record)
19 | 
20 |     def __getitem__(self, index):
21 |         return self.get_line(index)
22 | 
23 |     def init_candidate(self,k):
24 |         candidates = []
25 |         can = itertools.product(self.alphabet, repeat=k)
26 |         for c in can:
27 |             c = ''.join(c)
28 |             candidates.append(c)
29 |         return candidates


--------------------------------------------------------------------------------
/models/GroundTruth.py:
--------------------------------------------------------------------------------
  1 | '''
  2 |     Calculate ground truth with standard Apriori algorithm
  3 | '''
  4 | import itertools
  5 | from collections import defaultdict
  6 | import multiprocess
  7 | import math
  8 | from models.seqUtils import seqUtils
  9 | 
 10 | def ground_truth_worker(dataset, candidates, participents, queue):
 11 |     local_support_count = defaultdict(lambda: 0)
 12 |     for idx in range(len(participents)):
 13 |         client_idx = participents[idx]
 14 |         for candi in candidates:
 15 |             if candi in dataset[client_idx]:
 16 |                 local_support_count[candi] += 1
 17 | 
 18 |     queue.put(local_support_count)
 19 |     return
 20 | 
 21 | def FirstGenCan(alphabet,minl):
 22 |         init_candidates = []
 23 |         can = itertools.product(alphabet, repeat=minl)
 24 |         for c in can:
 25 |             c = ''.join(c)
 26 |             init_candidates.append(c)
 27 |         return init_candidates
 28 | 
 29 | def generateC(accept,alphabet):
 30 |     C = []
 31 |     for ac in accept:
 32 |         for i in alphabet:
 33 |             C.append(ac+i)
 34 |     return C
 35 | 
 36 | def groundTruth(dataset, args):
 37 |     util = seqUtils()
 38 |     k = args.k * len(dataset)
 39 |     traj_num = len(dataset)
 40 |     frag_len = args.minl - 1
 41 |     res = {}
 42 |     # alphabet =  ["A", "G", "C", "T"]
 43 |     alphabet = ["a", "g", "c", "t"]
 44 |     # longer fragments
 45 |     while True:
 46 |         frag_len += 1
 47 |         if frag_len == args.maxl+1:
 48 |             return res
 49 | 
 50 |         if frag_len == args.minl:
 51 |             candidates = FirstGenCan(alphabet,args.minl)
 52 |         else:
 53 |             candidates = generateC(fragments,alphabet)
 54 | 
 55 | 
 56 |         if len(candidates) == 0:
 57 |             return res
 58 | 
 59 |         support_count = defaultdict(lambda: 0)
 60 |         if args.process <= 0:
 61 |             for traj_idx in range(traj_num):
 62 |                 traj = dataset.get_trajectory(traj_idx)
 63 |                 for candi in candidates:
 64 |                     if traj.checkSub(candi) is True:
 65 |                         support_count[candi] += 1
 66 | 
 67 |                 if traj_idx % 10000 == 0 and args.verbose:
 68 |                     print("%d trajectories checked" % traj_idx)
 69 |         else:
 70 |             mananger = multiprocess.Manager()
 71 |             queue = mananger.Queue()
 72 |             jobs = []
 73 |             workload = math.floor(traj_num / args.process)
 74 |             for proc_idx in range(args.process):
 75 |                 if proc_idx == args.process - 1:
 76 |                     participents_load = list(range(proc_idx * workload, traj_num))
 77 |                 else:
 78 |                     participents_load = list(range(proc_idx * workload, (proc_idx + 1) * workload))
 79 |                 args.verbose = True
 80 |                 p = multiprocess.Process(target=ground_truth_worker,
 81 |                                          args=(dataset, candidates, participents_load, queue))
 82 |                 jobs.append(p)
 83 |                 p.start()
 84 | 
 85 |             for p in jobs:
 86 |                 p.join()
 87 | 
 88 |             proc_results = [queue.get() for j in jobs]
 89 | 
 90 |             for proc_res in proc_results:
 91 |                 for key, value in proc_res.items():
 92 |                     support_count[key] += value
 93 | 
 94 |         fragments = [key for key, value in support_count.items() if value >= k]
 95 |         for key, value in support_count.items():
 96 |             if value >= k:
 97 |                 res[key] = value
 98 | 
 99 |         #print("%d-fragments: %d admitted" % (frag_len, len(fragments)))
100 | 


--------------------------------------------------------------------------------
/models/Handlers.py:
--------------------------------------------------------------------------------
  1 | import abc
  2 | from collections import defaultdict
  3 | import multiprocess
  4 | from models.Sandwich import FfpaServer
  5 | import math
  6 | from models.Randomize import Randomizer
  7 | from utils.Sampling import sampleClients
  8 | 
  9 | def gen_pnext(substring):
 10 |     index, m = 0, len(substring)
 11 |     pnext = [0]*m
 12 |     i = 1
 13 |     while i < m:
 14 |         if (substring[i] == substring[index]):
 15 |             pnext[i] = index + 1
 16 |             index += 1
 17 |             i += 1
 18 |         elif (index!=0):
 19 |             index = pnext[index-1]
 20 |         else:
 21 |             pnext[i] = 0
 22 |             i += 1
 23 |     return pnext
 24 | 
 25 | def KMP_algorithm(string, substring):
 26 |     pnext = gen_pnext(substring)
 27 |     n = len(string)
 28 |     m = len(substring)
 29 |     i, j = 0, 0
 30 |     while (i<n) and (j<m):
 31 |         if (string[i]==substring[j]):
 32 |             i += 1
 33 |             j += 1
 34 |         elif (j!=0):
 35 |             j = pnext[j-1]
 36 |         else:
 37 |             i += 1
 38 |     if (j == m):
 39 |         return i-j
 40 |     else:
 41 |         return -1
 42 | 
 43 | class Handler(metaclass=abc.ABCMeta):
 44 |     @abc.abstractclassmethod
 45 |     def run(self):
 46 |         pass
 47 | 
 48 | class flmdHandler(Handler):
 49 |     def __init__(self,args,dataset):
 50 |         self.args = args
 51 |         # self.alphabet =  ["A", "G", "C", "T"]
 52 |         self.alphabet = ["a","g","c","t"]
 53 |         self.args.eta = self.__calculateEta()
 54 |         self.dataset = dataset
 55 |         self.orig_rec_num = len(self.dataset)
 56 |         self.clients_num = self.orig_rec_num
 57 |         self.args.num_clients = self.clients_num
 58 |         self.server = FfpaServer(self.args)
 59 |         self.randomizer = Randomizer(self.args)
 60 |         self.server.FirstGenCan(self.alphabet,self.args.minl)
 61 |         self.round = 0
 62 | 
 63 |     def run(self):
 64 |         while True:
 65 |             if self.server.terminal(self.round,self.args.maxl,self.args.minl) is True:
 66 |                 self.args.round = self.round
 67 |                 return self.server.accept_pool.pool
 68 |             self.round += 1
 69 |             participents = sampleClients(self.args, self.orig_rec_num)
 70 |             self.args.num_candidate = self.server.candidateNum()
 71 | 
 72 |             support_count = defaultdict(lambda: 0)
 73 |             for idx in range(len(participents)):
 74 |                 client_idx = participents[idx]
 75 |                 Mergecandidates = self.server.drawCandidate()
 76 |                 res = self.__oneClient(client_idx, Mergecandidates)
 77 | 
 78 |                 for key, value in res.items():
 79 |                     if key not in support_count.keys():
 80 |                         support_count[key] = [0, 0]
 81 |                     support_count[key][value] += 1
 82 | 
 83 |             accept = self.server.uploadSupportCount(support_count)
 84 | 
 85 | 
 86 |     def __processWorker(self,proc_idx,participents,queue):
 87 |         support_count = defaultdict(lambda : 0)
 88 |         for idx in range(len(participents)):
 89 |             client_idx = participents[idx]
 90 |             Mergecandidates = self.server.drawCandidate()
 91 |             res = self.__oneClient(client_idx,Mergecandidates)
 92 |             for key,value in res.items():
 93 |                 if key not in support_count.keys():
 94 |                     support_count[key] = [0,0]
 95 |                 support_count[key][value] += 1
 96 | 
 97 |         queue.put(support_count)
 98 |         return
 99 |     def __oneClient(self,client_idx,Mergecandidates):
100 |         candi_save = []
101 |         for i in Mergecandidates:
102 |             s = i[0:(len(i) - len(self.alphabet))]
103 |             for j in self.alphabet:
104 |                 candi_save.append(s+j)
105 | 
106 |         response = [0] * len(candi_save)
107 |         ynum = 0
108 |         for i in range(len(candi_save)):
109 |             if candi_save[i] in self.dataset[client_idx]:
110 |                 response[i] = 1
111 |                 ynum = ynum + 1
112 |         response = self.randomizer.randomBits(response)
113 |         final_response = {}
114 |         for i in range(len(candi_save)):
115 |             final_response[candi_save[i]] = response[i]
116 |         return final_response
117 | 
118 |     def __calculateEta(self):
119 |         epsilon = self.args.epsilon
120 |         candidates = self.args.num_candidate
121 |         return 1/(1 + math.pow(math.e,(epsilon/candidates)))
122 | 


--------------------------------------------------------------------------------
/models/Randomize.py:
--------------------------------------------------------------------------------
 1 | import numpy as np
 2 | 
 3 | class Randomizer():
 4 |     def __init__(self, args):
 5 |         self.args = args
 6 |         self.eta = self.args.eta
 7 | 
 8 |     def randomBits(self, data):
 9 |         # randomize a list of bits
10 |         for i in range(len(data)):
11 |             draw = np.random.random_sample()
12 |             if draw < self.eta:
13 |                 data[i] = 1 - data[i]
14 |         return data
15 | 
16 | 
17 | 


--------------------------------------------------------------------------------
/models/Sandwich.py:
--------------------------------------------------------------------------------
  1 | import numpy as np
  2 | import math
  3 | from models.seqUtils import *
  4 | import itertools
  5 | class FfpaServer():
  6 | 
  7 |     def __init__(self, args):
  8 |         self.args = args
  9 |         utils = seqUtils()
 10 |         self.candidate_pool = CandidatePool(self.args)
 11 |         self.accept_pool = AcceptPool(utils)
 12 | 
 13 |     def drawCandidate(self):
 14 |         return self.candidate_pool.mergeCpool
 15 | 
 16 |     def FirstGenCan(self,alphabet,minl):
 17 |         init_candidates = []
 18 |         can = itertools.product(alphabet, repeat=minl)
 19 |         for c in can:
 20 |             c = ''.join(c)
 21 |             init_candidates.append(c)
 22 |         for candi in init_candidates:
 23 |             self.initCandidate(candi)
 24 |         self.candidate_pool.mergeCpool = []
 25 |         alphabetS = ""
 26 |         for i in alphabet:
 27 |             alphabetS = alphabetS + i
 28 |         Mcan = itertools.product(alphabet, repeat=minl-1)
 29 |         for c in Mcan:
 30 |             cs = ""
 31 |             for j in c:
 32 |                 cs = cs + j
 33 |             self.candidate_pool.mergeCpool.append(cs+alphabetS)
 34 | 
 35 |     def initCandidate(self, candidate):
 36 |         self.candidate_pool.newCandidate(candidate)
 37 | 
 38 |     def candidateNum(self):
 39 |         return len(self.candidate_pool.pool.keys())
 40 | 
 41 |     # Determine whether the server should stop asking
 42 |     def terminal(self,round,lmax,lmin):
 43 |         if round == lmax - lmin + 1:
 44 |             return True
 45 |         if self.candidateNum() == 0:
 46 |             return True
 47 |         return False
 48 | 
 49 |     def uploadSupportCount(self, update):
 50 |         for candidate, support in update.items():
 51 |             self.candidate_pool.updateResponse(candidate,support)
 52 | 
 53 |         accept = self.candidate_pool.leaveCheck()
 54 |         C,MergeC = self.accept_pool.addAccept(accept)
 55 | 
 56 |         self.candidate_pool.mergeCpool = MergeC
 57 |         new_candidates = set(C)
 58 |         for new_c in new_candidates:
 59 |             self.candidate_pool.newCandidate(new_c)
 60 |         return accept
 61 | 
 62 | class CandidatePool():
 63 | 
 64 |     def __init__(self, args):
 65 |         self.pool = {}
 66 |         self.mergeCpool = []
 67 |         self.args = args
 68 |         self.kprop = self.args.k
 69 |         self.leave_log = {}  # how many support got when leaving the pool
 70 |         self.alphabet = ["a","g","c","t"]
 71 |         self.thres = 100
 72 | 
 73 |     def newCandidate(self, candidate):
 74 |         self.pool[candidate] = [0, 0]
 75 | 
 76 |     def drawCandidate(self):
 77 |         return self.mergeCpool
 78 | 
 79 |     def updateResponse(self, candidate, res):
 80 |         # res:: 0: no; 1: yes
 81 |         self.pool[candidate][0] += res[0]
 82 |         self.pool[candidate][1] += res[1]
 83 | 
 84 |     def leaveCheck(self):
 85 |         accept = {}
 86 |         self.thres = self.kprop * (1 - self.args.eta) + (1 - self.kprop) * self.args.eta + math.sqrt(-math.log(self.args.xi) / (2 * self.args.num_participants))
 87 |         for k in self.pool.keys():
 88 |             if self.pool[k][1] / self.args.num_participants >= self.thres:
 89 |                 accept[k]=self.pool[k][1]
 90 |                 self.leave_log[k] = (self.pool[k][0] + self.pool[k][1], 'accept')
 91 | 
 92 |         self.pool = {}
 93 |         return accept
 94 | 
 95 |     def candidate_num(self):
 96 |         return len(self.pool.keys())
 97 | 
 98 |     def get_leave_log(self):
 99 |         return self.leave_log
100 | 
101 | class AcceptPool():
102 |     def __init__(self, utils):
103 |         self.pool = {}
104 |         self.utils = utils
105 |         self.candidate_history = set()
106 |         # self.alphabet =  ["A", "G", "C", "T"]
107 |         self.alphabet = ["a", "g", "c", "t"]
108 | 
109 |     def addAccept(self, accepts):
110 |         for ac in accepts.keys():
111 |             self.pool[ac]=accepts[ac]
112 | 
113 |         C = []
114 |         MergeC = []
115 |         S = ""
116 |         for i in self.alphabet:
117 |             S = S + i
118 |         for ac in accepts.keys():
119 |             MergeC.append(ac + S)
120 |             for i in self.alphabet:
121 |                 C.append(ac + i)
122 | 
123 |         return C,MergeC
124 | 
125 |     def __normalizePool(self, pool):
126 |         res = set()
127 |         for subpool in pool.values():
128 |             res.update(subpool)
129 |         return res
130 | 
131 |     def output(self):
132 |         return self.__normalizePool(self.pool)
133 | 
134 |     def outputSuper(self):
135 |         return self.__normalizePool(self.super_pool)
136 | 


--------------------------------------------------------------------------------
/models/__pycache__/ConsolidatedFrequency.cpython-311.pyc:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/DSI-Lab1/DPFLMD/552db919d58af15cae8204bf5bd2b85d7350f632/models/__pycache__/ConsolidatedFrequency.cpython-311.pyc


--------------------------------------------------------------------------------
/models/__pycache__/ConsolidatedFrequency.cpython-38.pyc:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/DSI-Lab1/DPFLMD/552db919d58af15cae8204bf5bd2b85d7350f632/models/__pycache__/ConsolidatedFrequency.cpython-38.pyc


--------------------------------------------------------------------------------
/models/__pycache__/GroundTruth.cpython-311.pyc:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/DSI-Lab1/DPFLMD/552db919d58af15cae8204bf5bd2b85d7350f632/models/__pycache__/GroundTruth.cpython-311.pyc


--------------------------------------------------------------------------------
/models/__pycache__/GroundTruth.cpython-38.pyc:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/DSI-Lab1/DPFLMD/552db919d58af15cae8204bf5bd2b85d7350f632/models/__pycache__/GroundTruth.cpython-38.pyc


--------------------------------------------------------------------------------
/models/__pycache__/Handlers.cpython-311.pyc:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/DSI-Lab1/DPFLMD/552db919d58af15cae8204bf5bd2b85d7350f632/models/__pycache__/Handlers.cpython-311.pyc


--------------------------------------------------------------------------------
/models/__pycache__/Handlers.cpython-38.pyc:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/DSI-Lab1/DPFLMD/552db919d58af15cae8204bf5bd2b85d7350f632/models/__pycache__/Handlers.cpython-38.pyc


--------------------------------------------------------------------------------
/models/__pycache__/Randomize.cpython-311.pyc:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/DSI-Lab1/DPFLMD/552db919d58af15cae8204bf5bd2b85d7350f632/models/__pycache__/Randomize.cpython-311.pyc


--------------------------------------------------------------------------------
/models/__pycache__/Randomize.cpython-38.pyc:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/DSI-Lab1/DPFLMD/552db919d58af15cae8204bf5bd2b85d7350f632/models/__pycache__/Randomize.cpython-38.pyc


--------------------------------------------------------------------------------
/models/__pycache__/Sandwich.cpython-311.pyc:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/DSI-Lab1/DPFLMD/552db919d58af15cae8204bf5bd2b85d7350f632/models/__pycache__/Sandwich.cpython-311.pyc


--------------------------------------------------------------------------------
/models/__pycache__/Sandwich.cpython-38.pyc:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/DSI-Lab1/DPFLMD/552db919d58af15cae8204bf5bd2b85d7350f632/models/__pycache__/Sandwich.cpython-38.pyc


--------------------------------------------------------------------------------
/models/__pycache__/seqUtils.cpython-311.pyc:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/DSI-Lab1/DPFLMD/552db919d58af15cae8204bf5bd2b85d7350f632/models/__pycache__/seqUtils.cpython-311.pyc


--------------------------------------------------------------------------------
/models/__pycache__/seqUtils.cpython-38.pyc:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/DSI-Lab1/DPFLMD/552db919d58af15cae8204bf5bd2b85d7350f632/models/__pycache__/seqUtils.cpython-38.pyc


--------------------------------------------------------------------------------
/models/seqUtils.py:
--------------------------------------------------------------------------------
 1 | from copy import deepcopy
 2 | 
 3 | 
 4 | class seqUtils():
 5 |     def __init__(self):
 6 |         return
 7 | 
 8 |     def linker(self, a, b):
 9 |         if self.length(a) != self.length(b):
10 |             return []
11 |         l = self.length(a)
12 |         if l == 1:
13 |             data = [a[0], b[0]]
14 |             traj = tuple(data)
15 |             return [traj]
16 | 
17 |         a_piece = a[1:l]
18 |         b_piece = b[0:l - 1]
19 | 
20 |         comp = (a_piece == b_piece)
21 |         if comp is False:
22 |             return []
23 | 
24 |         data = deepcopy(list(a))
25 |         data.append(b[l - 1])
26 |         traj = tuple(data)
27 |         return [traj]
28 | 
29 |     def sub(self, target):
30 |         l = self.length(target)
31 |         if l == 1:
32 |             return []
33 |         target_list = list(target)
34 |         sub1 = target_list[0:l - 1]
35 |         sub2 = target_list[1:l]
36 |         return [tuple(sub1), tuple(sub2)]
37 | 
38 |     def length(self, target):
39 |         return len(target)
40 | 


--------------------------------------------------------------------------------
/readme.md:
--------------------------------------------------------------------------------
 1 | # DP-FLMD
 2 | This repo hosts the code for paper "Privacy-Preserving Federated Discovery of DNA Motifs with Differential Privacy", Expert Systems With Applications, Chen, Yao and Gan, Wensheng and Huang, Gengsen and Wu, Yongdong and Philip, S Yu, 2024.
 3 | 
 4 | ## Requirements
 5 | Python programming language.
 6 | 
 7 | ## Running the program
 8 | python main.py --mode=FLMD --num_candidate=1 --num_participants=261 --k=0.01 --epsilon=3 --minl=1 --maxl=4 --topN=30 --delta=1 --xi=0.01 --process=14
 9 | 
10 | ## Introduction
11 | DP-FLMD is a privacy-preserving federated framework for discovering DNA sequence motifs. We employ federated learning and differential privacy, allowing participants to store their raw data locally and upload only selected parameters to protect data privacy. DP-FLMD uses a query-response method between the server and participants. The server sends sequences to participants for querying. The participants send simple binary answers to respond to the queries from the server, where the binary answers are obtained by the participants executing the LDP method. Then, the server discovers motifs according to the response results of multiple rounds.
12 | 
13 | ## Dataset
14 | We used six DNA datasets, including promoters(https://archive.ics.uci.edu/ml/machine-learning-databases/molecular-biology/promoter-gene-sequences/promoters.data), washington(http://bio.cs.washington.edu/assessment/download.html), chrUn(https://hgdownload.soe.ucsc.edu/goldenPath/mm39/chromosomes/chrUn_MU069435v1.fa.gz), splice(https://archive.ics.uci.edu/ml/machine-learning-databases/molecular-biology/splice-junction-gene-sequences), chrY(https://hgdownload.soe.ucsc.edu/goldenPath/mm39/chromosomes/chrY_JH584301v1_random.fa.gz), and centers(https://github.com/microsoft/clustered-nanopore-reads-dataset). 
15 | 
16 | ## Citation 
17 | If this article or code useful for your project, please refer to
18 | ```
19 | @article{chen2024privacy,
20 |   title={Privacy-Preserving Federated Discovery of DNA Motifs with Differential Privacy},
21 |   author={Chen, Yao and Gan, Wensheng and Huang, Gengsen and Wu, Yongdong and Philip, S Yu},
22 |   journal={Expert Systems With Applications},
23 |   year={2024}
24 | }
25 | ```
26 | 
27 | ## Notes
28 | If there are any questions, please contact us (Email: csyaochen@gmail.com).


--------------------------------------------------------------------------------
/utils/Options.py:
--------------------------------------------------------------------------------
 1 | import argparse
 2 | 
 3 | def args_parser():
 4 |     parser = argparse.ArgumentParser()
 5 |     # Motifs params
 6 |     parser.add_argument('--minl', type=int, default=5, help="Minimum length of motifs")
 7 |     parser.add_argument('--maxl', type=int, default=10, help="Maximum length of motifs")
 8 |     parser.add_argument('--topN', type=int, default=30, help="the value N in top-N")
 9 |     parser.add_argument('--delta', type=float, default=0.3, help="tolerance parameter")
10 | 
11 |     # Basic params
12 |     parser.add_argument('--k', type=float, default=10000,
13 |                         help="frequency threshold, when smaller than 1, it will be the proportion")
14 |     parser.add_argument('--xi', type=float, default=0.1, help="allowed error rate for frequency estimation")
15 |     parser.add_argument('--epsilon', type=float, default=10.0, help="param of LDP")
16 |     parser.add_argument('--num_participants', type=int, default=100000, help="number of participating clients")
17 |     parser.add_argument('--mode', type=str, default='FLMD', help="mode: FLMD || groundtruth")
18 |     parser.add_argument('--num_candidate', type=int, default=1, help="candidates sent to each client")
19 |     parser.add_argument('--duplicate', type=int, default=1, help="virtually duplicate the dataset")
20 |     parser.add_argument('--process', type=int, default=0, help="number of worker processes, 0: single process")
21 | 
22 |     args = parser.parse_args()
23 |     return args


--------------------------------------------------------------------------------
/utils/Sampling.py:
--------------------------------------------------------------------------------
 1 | import numpy as np
 2 | 
 3 | def sampleClients(args,orig_traj_num):
 4 |     m = args.num_participants
 5 |     clients = []
 6 |     for i in range(args.duplicate):
 7 |         clients.extend(list(range(orig_traj_num)))
 8 |     if m <= len(clients):
 9 |         res = np.random.choice(clients,m,replace=False)
10 |     else:
11 |         # Select the same client multiple times
12 |         res = np.random.choice(clients,m,replace=True)
13 |     return res


--------------------------------------------------------------------------------
/utils/__pycache__/Options.cpython-311.pyc:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/DSI-Lab1/DPFLMD/552db919d58af15cae8204bf5bd2b85d7350f632/utils/__pycache__/Options.cpython-311.pyc


--------------------------------------------------------------------------------
/utils/__pycache__/Options.cpython-38.pyc:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/DSI-Lab1/DPFLMD/552db919d58af15cae8204bf5bd2b85d7350f632/utils/__pycache__/Options.cpython-38.pyc


--------------------------------------------------------------------------------
/utils/__pycache__/Sampling.cpython-311.pyc:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/DSI-Lab1/DPFLMD/552db919d58af15cae8204bf5bd2b85d7350f632/utils/__pycache__/Sampling.cpython-311.pyc


--------------------------------------------------------------------------------
/utils/__pycache__/Sampling.cpython-38.pyc:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/DSI-Lab1/DPFLMD/552db919d58af15cae8204bf5bd2b85d7350f632/utils/__pycache__/Sampling.cpython-38.pyc


--------------------------------------------------------------------------------


thsi is the research paper and and code base explain me everything about this code base how it is working what are used and all